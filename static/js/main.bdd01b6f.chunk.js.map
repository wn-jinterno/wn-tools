{"version":3,"sources":["constants/actions.js","actions/globalActions.js","components/BaseContentCmp.js","pages/Home/Home.js","pages/Home/index.js","components/FlowTreeEditorCmp.js","components/ErrorBoundary.js","containers/FlowTreeEditorContainer.js","components/JsonEditorCmp.js","containers/JsonEditorContainer.js","components/NodesPanelCmp.js","containers/NodesPanelContainer.js","pages/FlowTreeTool/FlowTreeTool.js","pages/FlowTreeTool/index.js","App.js","reportWebVitals.js","reducers/global.js","reducers/index.js","store.js","index.js"],"names":["SET_IS_LOADING","RESET_STATE","SET_STATUS_MESSAGE","SET_FLOW_TREE","SET_AVAILABLE_NODES","SET_JSON_EDITOR_CONTENT","setStatusMessage","statusMessage","type","ACTIONS","payload","setIsLoading","isLoading","setJsonEditorContent","jsonEditorContent","BaseContentCmp","title","children","description","width","height","p","bg","alignItems","sx","borderBottom","fontSize","fontWeight","mx","Home","props","renderToolIcons","flexDirection","flexWrap","justifyContent","map","tool","idx","my","borderRadius","style","textDecoration","color","to","link","Avatar","name","size","px","py","this","Component","connect","state","ownProps","global","dispatch","GlobalActions","FlowTreeEditor","React","onTreeChange","treeData","setFlowTree","flowTree","JSON","stringify","onDeleteClick","path","removeNodeAtPath","getNodeKey","treeIndex","canDrop","node","nextParent","prevPath","nextPath","length","getVisibleNodeCount","innerStyle","padding","dndType","onChange","generateNodeProps","buttons","IconButton","icon","CrossIcon","intent","onClick","flowTreeTool","JsonEditorCmp","mode","theme","newValue","value","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","NodesPanelCmp","setState","shouldCopyOnOutsideDrop","canNodeHaveChildren","availableNodes","setAvailableNodes","FlowTreeTool","paddingTop","position","top","left","borderRight","NodesPanelContainer","FlowTreeEditorContainer","JsonEditorContainer","App","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","globalPersistConfig","key","storage","whitelist","combineReducers","persistReducer","action","persistConfig","blacklist","stateReconciler","autoMergeLevel2","persistedReducer","rootReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.bdd01b6f.chunk.js","sourcesContent":["export const SET_IS_LOADING = \"SET_IS_LOADING\";\nexport const RESET_STATE = \"RESET_STATE\";\nexport const SET_STATUS_MESSAGE = \"SET_STATUS_MESSAGE\";\nexport const SET_FLOW_TREE = \"SET_FLOW_TREE\";\nexport const SET_AVAILABLE_NODES = \"SET_AVAILABLE_NODES\";\nexport const SET_JSON_EDITOR_CONTENT = \"SET_JSON_EDITOR_CONTENT\";","import * as ACTIONS from '../constants/actions';\n\n\nexport const resetState = () => ({\n    type: ACTIONS.RESET_STATE\n});\n\nexport const setStatusMessage = statusMessage => ({\n    type: ACTIONS.SET_STATUS_MESSAGE,\n    payload: {\n        statusMessage\n    }\n});\n\nexport const setIsLoading = isLoading => ({\n    type: ACTIONS.SET_IS_LOADING,\n    payload: {\n        isLoading\n    }\n});\n\nexport const setFlowTree = flowTree => ({\n    type: ACTIONS.SET_FLOW_TREE,\n    payload: {\n        flowTree\n    }\n});\n\nexport const setAvailableNodes = availableNodes => ({\n    type: ACTIONS.SET_AVAILABLE_NODES,\n    payload: {\n        availableNodes\n    }\n});\n\nexport const setJsonEditorContent = jsonEditorContent => ({\n    type: ACTIONS.SET_JSON_EDITOR_CONTENT,\n    payload: {\n        jsonEditorContent\n    }\n});","import React from 'react';\nimport { Flex, Text, Box } from 'rebass';\nimport styles from '../styles.module.css';\n\nconst BaseContentCmp = ({ title, description, children, ...props}) => {\n    return (\n        <Box\n            width=\"100%\"\n            height={85}\n        >\n            <Flex\n                p={15}\n                bg='white'\n                alignItems='center'\n                sx={{\n                    borderBottom: \"1px solid #d8d8d8\",\n                }}\n            >\n                <Text p={2} fontSize={32} fontWeight='bold'>{title}</Text>\n                <Box mx='auto' />\n            </Flex>\n            { children }\n        </Box>\n    );\n}\n\nexport default BaseContentCmp;","import React, { Component } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Flex, Heading, Link, Box } from 'rebass';\nimport BaseContentCmp from '../../components/BaseContentCmp';\nimport { Avatar } from 'evergreen-ui';\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderToolIcons = () => {\n        const toolLists = [\n            {\n                \"name\": \"Flow Tree Tool\",\n                \"link\": \"/flowtreetool\",\n            },\n            {\n                \"name\": \"Test Tool 1\",\n                \"link\": \"/flowtreetool\",\n            },\n            {\n                \"name\": \"Test Tool 2\",\n                \"link\": \"/flowtreetool\",\n            },\n            {\n                \"name\": \"Test Tool 3\",\n                \"link\": \"/flowtreetool\",\n            }\n        ];\n\n        return (\n            <Flex\n                width=\"100%\"\n                flexDirection=\"row\"\n                flexWrap=\"wrap\"\n                justifyContent=\"space-between\"\n            >\n                {toolLists.map((tool, idx) => (\n                    <Flex\n                        key={tool.name}\n                        my={15}\n                        mx={15}\n                        borderRadius={32}\n                        width={150}\n                    >\n                        <RouterLink \n                            style={{ fontSize: \"0.9rem\", width: \"100%\", textDecoration: \"none\", color:  \"black\"}}\n                            to={tool.link}\n                        >\n                            <Box width=\"100%\">\n                                <Box \n                                    width=\"100%\" \n                                    height={150}>\n                                    <Avatar name={tool.name} size={150} />\n                                </Box>\n                                <Flex\n                                    width=\"100%\"\n                                    justifyContent=\"center\"\n                                    p={15}\n                                >\n                                    { tool.name } \n                                </Flex>\n                            </Box>\n                        </RouterLink>\n                    </Flex>\n                ))}\n            </Flex>\n        );\n    }\n    \n    render() {\n        return (\n            <BaseContentCmp title=\"Home\">\n                <Flex\n                    width=\"100%\"\n                    px=\"25%\"\n                    py={30}\n                    alignItems='center'\n                >\n                    { this.renderToolIcons() }\n                </Flex>\n            </BaseContentCmp>\n        )\n    }\n}","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../../actions/globalActions';\nimport Home from './Home';\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Home);","import { CrossIcon, IconButton } from 'evergreen-ui';\nimport React from 'react';\nimport SortableTree, { getVisibleNodeCount, removeNodeAtPath } from 'react-sortable-tree';\nimport { Box, Flex, Heading } from 'rebass';\nimport styles from '../styles.module.css';\nimport ErrorBoundary from './ErrorBoundary';\n\nclass FlowTreeEditor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // this.state = {\n        //     treeData: [\n        //       { title: 'processSale', children: [{ title: 'onRequestSetAmount', children: [{title: \"submitAmount\"}] }, { title: \"onDeviceError\"}] },\n        //     ],\n        // };\n    }\n\n    onTreeChange = (treeData) => {\n        const { flowTree, setFlowTree, setJsonEditorContent } = this.props;\n        setFlowTree(treeData);\n        setJsonEditorContent(JSON.stringify(treeData, null, '\\t'));\n    }\n\n    onDeleteClick = (path) => {\n        const { flowTree, setFlowTree, setJsonEditorContent } = this.props;\n        const getNodeKey = ({ treeIndex }) => treeIndex;\n        const treeData = removeNodeAtPath({\n            treeData: flowTree,\n            path,\n            getNodeKey,\n        });\n\n        setFlowTree(treeData);\n        setJsonEditorContent(JSON.stringify(treeData, null, '\\t'));\n    }\n\n    canDrop = ({ node, nextParent, prevPath, nextPath }) => {\n        // prevents having multiple root nodes\n        const { flowTree } = this.props;\n        return flowTree.length === 0 || nextParent !== null;\n    };\n\n    render() {\n        const { flowTree } = this.props;\n        const itemCount = getVisibleNodeCount({ treeData: flowTree }) + 1;\n        \n        return (\n            <Box height=\"100%\" width=\"100%\">\n                <Flex height=\"100%\" p={15} flexDirection=\"column\">\n                    <Heading p={15}>Flow Tree</Heading>\n                    <SortableTree\n                            innerStyle={{ padding: \"10px\"}}\n                            treeData={flowTree}\n                            dndType=\"FLOW_TREE_DND_TYPE\"\n                            onChange={this.onTreeChange}\n                            canDrop={this.canDrop}\n                            generateNodeProps={({ node, path }) => ({\n                                buttons: [\n                                    <IconButton \n                                        icon={CrossIcon} \n                                        intent=\"danger\" \n                                        onClick={() => this.onDeleteClick(path)}\n                                    />\n                                ],\n                            })}\n                        />\n                </Flex>\n            </Box>\n        );\n    }\n}\n\nexport default FlowTreeEditor;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n  \n    static getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return { hasError: true };\n    }\n  \n    componentDidCatch(error, errorInfo) {\n      // You can also log the error to an error reporting service\n      console.error(error, errorInfo);\n    }\n  \n    render() {\n      return this.props.children; \n    }\n}\n\nexport default ErrorBoundary;","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../actions/globalActions';\nimport FlowTreeEditor from \"../components/FlowTreeEditorCmp\";\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n      flowTree: state.global.flowTreeTool.flowTree,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n        setFlowTree: (flowTree) => dispatch(GlobalActions.setFlowTree(flowTree)),\n        setJsonEditorContent: (jsonEditorContent) => dispatch(GlobalActions.setJsonEditorContent(jsonEditorContent)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(FlowTreeEditor);","import React from 'react';\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport styles from '../styles.module.css';\n\nconst JsonEditorCmp = ({ jsonEditorContent, setJsonEditorContent, ...props}) => {\n    const onChange = (newValue) => {\n        setJsonEditorContent && setJsonEditorContent(newValue);\n    }\n\n    return (\n        <AceEditor\n            width=\"100%\"\n            height=\"100%\"\n            mode=\"json\"\n            theme=\"github\"\n            onChange={onChange}\n            value={jsonEditorContent}\n            name=\"flow-tree-json-editor\"\n            editorProps={{ $blockScrolling: true }}\n            setOptions={{\n                enableBasicAutocompletion: true,\n                enableLiveAutocompletion: true,\n                enableSnippets: true\n            }}\n        />\n    );\n}\n\nexport default JsonEditorCmp;","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../actions/globalActions';\nimport JsonEditorCmp from \"../components/JsonEditorCmp\";\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n      jsonEditorContent: state.global.flowTreeTool.jsonEditorContent,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n        setJsonEditorContent: (jsonEditorContent) => dispatch(GlobalActions.setJsonEditorContent(jsonEditorContent)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(JsonEditorCmp);","import { CrossIcon, IconButton } from 'evergreen-ui';\nimport React from 'react';\nimport SortableTree, { removeNodeAtPath } from 'react-sortable-tree';\nimport { Box, Heading } from 'rebass';\nimport styles from '../styles.module.css';\nimport ErrorBoundary from './ErrorBoundary';\n\nclass NodesPanelCmp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            treeData: [\n                { title: \"processSale\" },\n                { title: \"onRequestSetAmount\" },\n                { title: \"submitAmount\" },\n                { title: \"onDeviceError\" },\n                { title: \"onSaleResponse\" },\n                { title: \"onError\" },\n            ]\n        }\n    }\n\n    render() {\n        const getNodeKey = ({ treeIndex }) => treeIndex;\n\n        return (\n            <Box height=\"100%\" py={15}>\n                <Heading p={15}>Nodes</Heading>\n                <SortableTree\n                    treeData={this.state.treeData}\n                    dndType=\"FLOW_TREE_DND_TYPE\"\n                    innerStyle={{ padding: \"10px\"}}\n                    onChange={treeData => this.setState({ treeData })}\n                    shouldCopyOnOutsideDrop={true}\n                    canNodeHaveChildren={node => false}\n                    canDrop={node => false}\n                    generateNodeProps={({ node, path }) => ({\n                        buttons: [\n                            <IconButton \n                                icon={CrossIcon} \n                                intent=\"danger\" \n                                onClick={() =>\n                                    this.setState(state => ({\n                                        treeData: removeNodeAtPath({\n                                        treeData: state.treeData,\n                                        path,\n                                        getNodeKey,\n                                        }),\n                                    }))\n                                }\n                            />\n                        ],\n                    })}\n                />\n            </Box>\n        );\n    }\n}\n\nexport default NodesPanelCmp;","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../actions/globalActions';\nimport NodesPanelCmp from \"../components/NodesPanelCmp\";\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n      availableNodes: state.global.flowTreeTool.availableNodes,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n        setAvailableNodes: (availableNodes) => dispatch(GlobalActions.setAvailableNodes(availableNodes)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(NodesPanelCmp);","import React, { Component } from 'react';\nimport { Flex, Heading, Link, Box } from 'rebass';\nimport BaseContentCmp from '../../components/BaseContentCmp';\nimport FlowTreeEditorContainer from '../../containers/FlowTreeEditorContainer';\nimport JsonEditorContainer from '../../containers/JsonEditorContainer';\nimport NodesPanelContainer from '../../containers/NodesPanelContainer';\n\nexport default class FlowTreeTool extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <BaseContentCmp title=\"Flow Tree Generator\">\n                <Flex\n                    width=\"100%\"\n                    height=\"100%\"\n                    paddingTop={85}\n                    sx={{\n                        position: \"fixed\",\n                        top: 0,\n                        left: 0\n                    }}\n                >\n                    <Box\n                        width={2/8}\n                        sx={{\n                            borderRight: \"1px solid #d8d8d8\"\n                        }}\n                    >\n                        <NodesPanelContainer />\n                    </Box>\n                    <Box\n                        width={4/8}\n                    >\n                        <FlowTreeEditorContainer />\n                    </Box>\n                    <Box\n                        width={2/8}\n                    >\n                        <JsonEditorContainer />\n                    </Box>\n                </Flex>\n            </BaseContentCmp>\n        )\n    }\n}","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../../actions/globalActions';\nimport FlowTreeTool from './FlowTreeTool';\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(FlowTreeTool);","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Box, Flex } from 'rebass';\n\n\nimport './App.css';\n\nimport Home from './pages/Home';\nimport FlowTreeTool from './pages/FlowTreeTool';\n\nfunction App() {\n  return (\n    <Router>\n      <Box width=\"100%\">\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/flowtreetool\" component={FlowTreeTool} />\n      </Box>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as ACTIONS from '../constants/actions';\n\nconst initialState = {\n    isLoading: false,\n    statusMessage: \"\",\n    flowTreeTool: {\n        availableNodes: [],\n        jsonEditorContent: \"\",\n        flowTree: []\n    }\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case ACTIONS.RESET_STATE: {\n            return {\n                ...initialState,\n            };\n        }\n        case ACTIONS.SET_STATUS_MESSAGE: {\n            const { statusMessage } = action.payload;\n    \n            return {\n                ...state,\n                statusMessage,\n            }\n        }\n        case ACTIONS.SET_IS_LOADING: {\n            const { isLoading } = action.payload;\n    \n            return {\n                ...state,\n                isLoading,\n            }\n        }\n        case ACTIONS.SET_FLOW_TREE: {\n            const { flowTree } = action.payload;\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    flowTree,\n                },\n            }\n        }\n        case ACTIONS.SET_AVAILABLE_NODES: {\n            const { availableNodes } = action.payload;\n\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    availableNodes,\n                },\n            }\n        }\n        case ACTIONS.SET_JSON_EDITOR_CONTENT: {\n            const { jsonEditorContent } = action.payload;\n\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    jsonEditorContent,\n                },\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n\n","import { combineReducers } from \"redux\";\nimport globalReducer from './global'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst globalPersistConfig = {\n    key: 'global',\n    storage: storage,\n    whitelist: [], // specify which ones to persist offline\n  }\n\nexport default combineReducers({ \n    global: persistReducer(globalPersistConfig, globalReducer)\n});","import { createStore } from \"redux\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2'\nimport rootReducer from \"./reducers\";\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    blacklist: ['global'],\n    stateReconciler: autoMergeLevel2\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n/* eslint-disable no-underscore-dangle */\nexport const store = createStore(\n    persistedReducer, /* preloadedState, */\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport const persistor = persistStore(store);\n/* eslint-enable */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-sortable-tree/style.css'; \nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n        <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}