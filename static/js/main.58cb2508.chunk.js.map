{"version":3,"sources":["constants/actions.js","actions/globalActions.js","components/BaseContentCmp.js","pages/Home/Home.js","pages/Home/index.js","components/ErrorPanelCmp.js","components/SubPanelHeaderCmp.js","components/InstructionsCmp.js","components/FileDropZone.js","components/FlowTreePlaceholderRenderer/index.js","components/FlowTreePlaceholderRenderer/FlowTreePlaceholderRenderer.js","components/TreeNodeContentRenderer/TreeNodeContentRenderer.js","components/TreeNodeContentRenderer/index.js","components/FlowTreeEditorCmp.js","containers/FlowTreeEditorContainer.js","utils.js","components/JsonEditorCmp.js","containers/JsonEditorContainer.js","components/AddNodeCmp.js","components/NodesPanelCmp.js","containers/NodesPanelContainer.js","pages/FlowTreeTool/FlowTreeTool.js","pages/FlowTreeTool/index.js","components/PageNotFoundCmp.js","App.js","reportWebVitals.js","reducers/global.js","reducers/index.js","store.js","index.js","components/FlowTreePlaceholderRenderer/styles.module.css"],"names":["SET_IS_LOADING","RESET_STATE","SET_STATUS_MESSAGE","SET_FLOW_TREE","SET_FLOW_TREE_EXPORT_NAME","SET_FLOW_TREE_EXPORT_NODES","SET_AVAILABLE_NODES","SET_JSON_EDITOR_CONTENT","SET_FLOW_TREE_PARSING_ERROR","setStatusMessage","statusMessage","type","ACTIONS","payload","setIsLoading","isLoading","setFlowTree","flowTree","setFlowTreeExportName","flowTreeExportName","setFlowTreeExportNodes","flowTreeExportNodes","setJsonEditorContent","jsonEditorContent","BaseContentCmp","title","withLinkToHome","description","children","navChildren","width","height","p","bg","alignItems","sx","borderBottom","position","top","left","zIndex","marginRight","to","style","textDecoration","color","ArrowLeftIcon","size","fontSize","fontWeight","mx","paddingTop","Home","px","py","flexDirection","flexWrap","justifyContent","map","tool","idx","my","borderRadius","link","Avatar","name","connect","state","ownProps","global","dispatch","GlobalActions","ErrorPanelCmp","errorMessage","padding","backgroundColor","marginBottom","Text","lineHeight","SubPanelHeaderCmp","actionsCmp","paddingLeft","paddingRight","InstructionsCmp","icon","iconColor","textColor","textAlign","baseStyle","flex","display","borderWidth","borderColor","borderStyle","outline","transition","activeStyle","acceptStyle","rejectStyle","FileDropZone","onDrop","parentCanDrop","parentIsOver","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","FlowTreePlaceholderRenderer","isOver","canDrop","className","classNames","styles","rst__placeholderLandingPad","rst__placeholderCancelPad","sortabletree__placeholder","AddIcon","TreeNodeContentRenderer","handle","this","props","scaffoldBlockPxWidth","toggleChildrenVisibility","connectDragPreview","connectDragSource","isDragging","canDrag","node","subtitle","draggedNode","path","treeIndex","isSearchMatch","isSearchFocus","buttons","didDrop","rowDirection","treeId","parentNode","otherProps","nodeTitle","nodeSubtitle","rowDirectionClass","expanded","Array","_","index","DragHandleVerticalIcon","dropEffect","isDraggedDescendant","isDescendant","isLandingPadActive","buttonStyle","right","length","aria-label","onClick","opacity","btn","Component","defaultProps","FlowTreeEditor","onTreeChange","treeData","updateFlowTreeExportNodes","flowTreeExport","flatTreeData","getFlatDataFromTree","ignoreCollapsed","getNodeKey","id","parent","newTreeExportData","nodes","JSON","stringify","onDeleteClick","removeNodeAtPath","nextParent","prevPath","nextPath","onFlowTreeNameChange","newName","onExpandAllNodesSwitchChange","e","setState","allNodesExpanded","target","checked","newTreeData","toggleExpandedForAll","files","isEmpty","fileReader","FileReader","readAsText","onload","jsonStr","result","jsonData","jsonlint","parse","has","isString","isArray","Error","nullParentCount","newTreeFromFlatData","getTreeFromFlatData","flatData","getKey","getParentKey","rootKey","toaster","success","err","danger","message","onerror","abort","clearAllNodes","notify","fileInputRef","React","createRef","flowTreeParsingError","borderRight","TextInput","required","value","placeholder","onChange","Switch","disabled","Tooltip","content","IconButton","intent","CrossIcon","innerStyle","dndType","generateNodeProps","border","nodeContentRenderer","placeholderRenderer","flowTreeTool","parsingError","exportDataToJsonFile","fileName","newFileName","exportFromJSON","data","exportType","JsonEditorCmp","editorThemeList","label","theme","newValue","updateTreeDataFromJson","setFlowTreeParsingError","flowTreeExportFromJSON","handleFileUpload","onExportBtnClick","renderThemeList","editorTheme","SelectMenu","options","selected","onSelect","item","Button","Popover","Position","BOTTOM_RIGHT","Menu","Group","Item","ImportIcon","current","click","ref","Divider","DownloadIcon","iconAfter","CaretDownIcon","text","onCopy","iconBefore","ClipboardIcon","mode","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","AddNodeCmp","onAddNode","useState","isShown","setIsShown","nodeNameVal","setNodeNameVal","onDialogClose","Dialog","onCloseComplete","hasFooter","paddingBottom","TextInputField","marginTop","PlusIcon","NodesPanelCmp","setAvailableNodes","availableNodes","nodeName","concat","getAvailableNodes","readJSONFileContent","file","shouldCopyOnOutsideDrop","canNodeHaveChildren","FlowTreeTool","NodesPanelContainer","FlowTreeEditorContainer","JsonEditorContainer","PageNotFoundCmp","HomeIcon","App","basename","process","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","globalReducer","action","globalPersistConfig","key","storage","whitelist","combineReducers","persistReducer","persistConfig","blacklist","stateReconciler","autoMergeLevel2","persistedReducer","rootReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","loading","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.58cb2508.chunk.js","sourcesContent":["export const SET_IS_LOADING = \"SET_IS_LOADING\";\r\nexport const RESET_STATE = \"RESET_STATE\";\r\nexport const SET_STATUS_MESSAGE = \"SET_STATUS_MESSAGE\";\r\nexport const SET_FLOW_TREE = \"SET_FLOW_TREE\";\r\nexport const SET_FLOW_TREE_EXPORT_NAME = \"SET_FLOW_TREE_EXPORT_NAME\";\r\nexport const SET_FLOW_TREE_EXPORT_NODES = \"SET_FLOW_TREE_EXPORT_NODES\";\r\nexport const SET_AVAILABLE_NODES = \"SET_AVAILABLE_NODES\";\r\nexport const SET_JSON_EDITOR_CONTENT = \"SET_JSON_EDITOR_CONTENT\";\r\nexport const SET_FLOW_TREE_PARSING_ERROR = \"SET_FLOW_TREE_PARSING_ERROR\";","import * as ACTIONS from '../constants/actions';\r\n\r\n\r\nexport const resetState = () => ({\r\n    type: ACTIONS.RESET_STATE\r\n});\r\n\r\nexport const setStatusMessage = statusMessage => ({\r\n    type: ACTIONS.SET_STATUS_MESSAGE,\r\n    payload: {\r\n        statusMessage\r\n    }\r\n});\r\n\r\nexport const setIsLoading = isLoading => ({\r\n    type: ACTIONS.SET_IS_LOADING,\r\n    payload: {\r\n        isLoading\r\n    }\r\n});\r\n\r\nexport const setFlowTree = flowTree => ({\r\n    type: ACTIONS.SET_FLOW_TREE,\r\n    payload: {\r\n        flowTree\r\n    }\r\n});\r\n\r\nexport const setFlowTreeExportName = flowTreeExportName => ({\r\n    type: ACTIONS.SET_FLOW_TREE_EXPORT_NAME,\r\n    payload: {\r\n        flowTreeExportName\r\n    }\r\n});\r\n\r\nexport const setFlowTreeExportNodes = flowTreeExportNodes => ({\r\n    type: ACTIONS.SET_FLOW_TREE_EXPORT_NODES,\r\n    payload: {\r\n        flowTreeExportNodes\r\n    }\r\n});\r\n\r\nexport const setAvailableNodes = availableNodes => ({\r\n    type: ACTIONS.SET_AVAILABLE_NODES,\r\n    payload: {\r\n        availableNodes\r\n    }\r\n});\r\n\r\nexport const setJsonEditorContent = jsonEditorContent => ({\r\n    type: ACTIONS.SET_JSON_EDITOR_CONTENT,\r\n    payload: {\r\n        jsonEditorContent\r\n    }\r\n});\r\n\r\nexport const setFlowTreeParsingError = parsingError => ({\r\n    type: ACTIONS.SET_FLOW_TREE_PARSING_ERROR,\r\n    payload: {\r\n        parsingError\r\n    }\r\n});","import { ArrowLeftIcon } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Flex, Text, Box } from 'rebass';\r\n\r\nconst BaseContentCmp = ({ title, description, withLinkToHome, children, navChildren }) => {\r\n    return (\r\n        <Box\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n        >\r\n            <Flex\r\n                width=\"100%\"\r\n                height={60}\r\n                p={15}\r\n                bg='white'\r\n                alignItems='center'\r\n                sx={{\r\n                    borderBottom: \"1px solid #d8d8d8\",\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    left: 0,\r\n                    zIndex: 1,\r\n                }}\r\n            >\r\n                {\r\n                    withLinkToHome && (\r\n                        <Flex marginRight={15}>\r\n                            <Link to=\"/\" style={{ textDecoration: \"none\", color: \"#6D6D6D\"}}>\r\n                                <ArrowLeftIcon size={32} />\r\n                            </Link>\r\n                        </Flex>\r\n                    )\r\n                }\r\n                <Text p={2} fontSize={24} fontWeight='bold'>{title}</Text>\r\n                <Box mx='auto' />\r\n                { navChildren }\r\n            </Flex>\r\n            <Flex\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                sx={{\r\n                    paddingTop: \"60px\"\r\n                }}\r\n            >\r\n\r\n                { children }\r\n            </Flex>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default BaseContentCmp;","import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { Flex, Box } from 'rebass';\r\nimport BaseContentCmp from '../../components/BaseContentCmp';\r\nimport { Avatar } from 'evergreen-ui';\r\n\r\nconst Home = () => {\r\n\r\n    const renderToolIcons = () => {\r\n        const toolLists = [\r\n            {\r\n                \"name\": \"Flow Tree Tool\",\r\n                \"link\": \"/flowtreetool\",\r\n            },\r\n            {\r\n                \"name\": \"Test Tool 1\",\r\n                \"link\": \"/testtool1\",\r\n            },\r\n            {\r\n                \"name\": \"Test Tool 2\",\r\n                \"link\": \"/testtool2\",\r\n            },\r\n            {\r\n                \"name\": \"Test Tool 3\",\r\n                \"link\": \"/testtool3\",\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <Flex\r\n                width=\"100%\"\r\n                flexDirection=\"row\"\r\n                flexWrap=\"wrap\"\r\n                justifyContent=\"space-between\"\r\n            >\r\n                {toolLists.map((tool, idx) => (\r\n                    <Flex\r\n                        key={tool.name}\r\n                        my={15}\r\n                        mx={15}\r\n                        borderRadius={32}\r\n                        width={150}\r\n                    >\r\n                        <RouterLink \r\n                            style={{ fontSize: \"0.9rem\", width: \"100%\", textDecoration: \"none\", color:  \"black\"}}\r\n                            to={tool.link}\r\n                        >\r\n                            <Box width=\"100%\">\r\n                                <Box \r\n                                    width=\"100%\" \r\n                                    height={150}>\r\n                                    <Avatar name={tool.name} size={150} />\r\n                                </Box>\r\n                                <Flex\r\n                                    width=\"100%\"\r\n                                    justifyContent=\"center\"\r\n                                    p={15}\r\n                                >\r\n                                    { tool.name } \r\n                                </Flex>\r\n                            </Box>\r\n                        </RouterLink>\r\n                    </Flex>\r\n                ))}\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <BaseContentCmp title=\"Home\">\r\n            <Flex\r\n                width=\"100%\"\r\n                px=\"25%\"\r\n                py={30}\r\n                alignItems='center'\r\n            >\r\n                { renderToolIcons() }\r\n            </Flex>\r\n        </BaseContentCmp>\r\n    );\r\n}\r\n\r\nexport default Home;","import { connect } from \"react-redux\";\r\nimport * as GlobalActions from '../../actions/globalActions';\r\nimport Home from './Home';\r\n\r\nconst mapStateToProps = (state , ownProps) => {\r\n    return {\r\n      isLoading: state.global.isLoading,\r\n      statusMessage: state.global.statusMessage,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {       \r\n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\r\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(Home);","import { Text } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport { Flex } from 'rebass';\r\n\r\nconst ErrorPanelCmp = ({ errorMessage }) => {\r\n    return (\r\n        <Flex \r\n            flexDirection=\"column\"\r\n            width=\"100%\" \r\n            height=\"100%\" \r\n            padding={30}\r\n            backgroundColor=\"#FFCCCC\"\r\n        >\r\n            <Flex marginBottom={50}>\r\n                <Text \r\n                    color=\"#cc0000\"\r\n                    fontSize=\"2em\"\r\n                >\r\n                    ERROR\r\n                </Text>\r\n            </Flex>\r\n            <Flex>\r\n                <Text\r\n                    color=\"#cc0000\"\r\n                    lineHeight=\"1em\"\r\n                    fontSize=\"1em\"\r\n                >\r\n                    {errorMessage}\r\n                </Text>\r\n            </Flex>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default ErrorPanelCmp;","import { Text } from \"evergreen-ui\";\r\nimport { Flex } from \"rebass\";\r\n\r\n\r\nconst SubPanelHeaderCmp = ({ title, actionsCmp }) => {\r\n    return (\r\n        <Flex\r\n            flexDirection=\"row\"\r\n            justifyContent=\"space-between\"\r\n            sx={{\r\n                padding: \"15px\",\r\n                paddingLeft: 0,\r\n                paddingRight: 0\r\n            }}\r\n        >\r\n            <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n                <Text fontSize=\"1.1rem\" fontWeight=\"bold\">{title}</Text>\r\n            </Flex>\r\n            <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n                { actionsCmp }\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default SubPanelHeaderCmp;","import { Icon, Text } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport { Flex } from 'rebass';\r\n\r\nconst InstructionsCmp = ({ icon, iconColor = \"#d9d9d9\", textColor = \"#d9d9d9\", children, style = {} }) => {\r\n    return (\r\n        <Flex \r\n            flexDirection=\"column\"\r\n            width=\"100%\" \r\n            height=\"100%\" \r\n            padding={30}\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            sx={{\r\n                ...style,         \r\n            }}\r\n        >\r\n            {\r\n                icon && (\r\n                    <Flex marginBottom={20}>\r\n                        <Icon \r\n                            color={iconColor} \r\n                            icon={icon} \r\n                            size={50}\r\n                        />\r\n                    </Flex>\r\n                )\r\n            }\r\n            <Text \r\n                fontSize={24} \r\n                fontWeight=\"bold\" \r\n                textAlign=\"center\" \r\n                lineHeight={1.5}\r\n                color={textColor}\r\n            >\r\n                { children }\r\n            </Text>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default InstructionsCmp;","import React, { useMemo } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\n\r\n// border: \"3px dashed #d9d9d9\"\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    borderWidth: 3,\r\n    borderRadius: 2,\r\n    borderColor: '#d9d9d9',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#fafafa',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n  };\r\n\r\n  const FileDropZoneColors = {\r\n    active: '#2196f3',\r\n    accept: '#00e676',\r\n    reject: '#ff1744'\r\n  }\r\n  \r\n  const activeStyle = {\r\n    borderColor: FileDropZoneColors.active,\r\n  };\r\n  \r\n  const acceptStyle = {\r\n    borderColor: FileDropZoneColors.accept,\r\n  };\r\n  \r\n  const rejectStyle = {\r\n    borderColor: FileDropZoneColors.reject,\r\n  };\r\n\r\nconst FileDropZone = ({ onDrop, children, parentCanDrop, parentIsOver }) => {\r\n    const {\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n    } = useDropzone({\r\n        accept: \"application/JSON\",\r\n        onDrop,\r\n    });\r\n\r\n    const style = useMemo(() => ({\r\n        ...baseStyle,\r\n        ...(isDragActive ? activeStyle : {}),\r\n        ...((isDragAccept || parentCanDrop) ? acceptStyle : {}),\r\n        ...((isDragReject || (parentCanDrop && !parentIsOver)) ? rejectStyle : {})\r\n      }), [\r\n        isDragActive,\r\n        isDragReject,\r\n        isDragAccept,\r\n        parentCanDrop,\r\n        parentIsOver,\r\n      ]);\r\n\r\n    return (\r\n        <div {...getRootProps({style})}>\r\n            <input {...getInputProps()} />\r\n            { children }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default FileDropZone;","import FlowTreePlaceholderRenderer from './FlowTreePlaceholderRenderer';\r\n\r\nexport default FlowTreePlaceholderRenderer;","import React from 'react';\r\nimport styles from './styles.module.css';\r\nimport classNames from 'classnames';\r\nimport { AddIcon } from 'evergreen-ui';\r\nimport InstructionsCmp from '../InstructionsCmp';\r\nimport FileDropZone from '../FileDropZone';\r\n\r\nconst FlowTreePlaceholderRenderer = ({ isOver, canDrop, onDrop }) => {\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        'rst__placeholder',\r\n        {\r\n          ['rst__placeholderLandingPad']: canDrop,\r\n          ['rst__placeholderCancelPad']: canDrop && !isOver,\r\n          [styles.rst__placeholderLandingPad]: canDrop,\r\n          [styles.rst__placeholderCancelPad]: canDrop && !isOver,\r\n        },\r\n        styles.sortabletree__placeholder,\r\n      )}\r\n    >\r\n      <FileDropZone\r\n        parentCanDrop={canDrop}\r\n        parentIsOver={isOver}\r\n        onDrop={onDrop}\r\n      >\r\n        <InstructionsCmp\r\n            icon={AddIcon}\r\n        >\r\n            Add Nodes or Import JSON File\r\n        </InstructionsCmp>\r\n      </FileDropZone>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FlowTreePlaceholderRenderer;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { isDescendant } from 'react-sortable-tree';\r\nimport './tree-node-renderer.css';\r\nimport './tree-node-content-renderer.css';\r\nimport classNames from 'classnames';\r\nimport { DragHandleVerticalIcon, Icon } from 'evergreen-ui';\r\nimport { Flex } from 'rebass';\r\n\r\nclass TreeNodeContentRenderer extends Component {\r\n  render() {\r\n    const {\r\n      scaffoldBlockPxWidth,\r\n      toggleChildrenVisibility,\r\n      connectDragPreview,\r\n      connectDragSource,\r\n      isDragging,\r\n      canDrop,\r\n      canDrag,\r\n      node,\r\n      title,\r\n      subtitle,\r\n      draggedNode,\r\n      path,\r\n      treeIndex,\r\n      isSearchMatch,\r\n      isSearchFocus,\r\n      buttons,\r\n      className,\r\n      style,\r\n      didDrop,\r\n      treeId,\r\n      isOver, // Not needed, but preserved for other renderers\r\n      parentNode, // Needed for dndManager\r\n      rowDirection,\r\n      ...otherProps\r\n    } = this.props;\r\n    const nodeTitle = title || node.title;\r\n    const nodeSubtitle = subtitle || node.subtitle;\r\n    const rowDirectionClass = rowDirection === 'rtl' ? 'rst__rtl' : null;\r\n\r\n    let handle;\r\n    if (canDrag) {\r\n      if (typeof node.children === 'function' && node.expanded) {\r\n        // Show a loading symbol on the handle when the children are expanded\r\n        //  and yet still defined by a function (a callback to fetch the children)\r\n        handle = (\r\n          <div className=\"rst__loadingHandle\">\r\n            <div className=\"rst__loadingCircle\">\r\n              {[...new Array(12)].map((_, index) => (\r\n                <div\r\n                  // eslint-disable-next-line react/no-array-index-key\r\n                  key={index}\r\n                  className={classNames(\r\n                    'rst__loadingCirclePoint',\r\n                    rowDirectionClass\r\n                  )}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        );\r\n      } else {\r\n        // Show the handle used to initiate a drag-and-drop\r\n        handle = connectDragSource(\r\n            <div className=\"rst__moveHandle\">\r\n                <Flex\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    flexDirection=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Icon icon={DragHandleVerticalIcon} color=\"white\" />\r\n                </Flex>\r\n            </div>, {\r\n          dropEffect: 'copy',\r\n        });\r\n      }\r\n    }\r\n\r\n    const isDraggedDescendant = draggedNode && isDescendant(draggedNode, node);\r\n    const isLandingPadActive = !didDrop && isDragging;\r\n\r\n    let buttonStyle = { left: -0.5 * scaffoldBlockPxWidth };\r\n    if (rowDirection === 'rtl') {\r\n      buttonStyle = { right: -0.5 * scaffoldBlockPxWidth };\r\n    }\r\n\r\n    return (\r\n      <div style={{ height: '100%' }} {...otherProps}>\r\n        {toggleChildrenVisibility &&\r\n          node.children &&\r\n          (node.children.length > 0 || typeof node.children === 'function') && (\r\n            <div>\r\n              <button\r\n                type=\"button\"\r\n                aria-label={node.expanded ? 'Collapse' : 'Expand'}\r\n                className={classNames(\r\n                  node.expanded ? 'rst__collapseButton' : 'rst__expandButton',\r\n                  rowDirectionClass\r\n                )}\r\n                style={buttonStyle}\r\n                onClick={() =>\r\n                  toggleChildrenVisibility({\r\n                    node,\r\n                    path,\r\n                    treeIndex,\r\n                  })\r\n                }\r\n              />\r\n\r\n              {node.expanded && !isDragging && (\r\n                <div\r\n                  style={{ width: scaffoldBlockPxWidth }}\r\n                  className={classNames('rst__lineChildren', rowDirectionClass)}\r\n                />\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n        <div className={classNames('rst__rowWrapper', rowDirectionClass)}>\r\n          {/* Set the row preview to be used during drag and drop */}\r\n          {connectDragPreview(\r\n            <div\r\n              className={classNames(\r\n                'rst__row',\r\n                isLandingPadActive && 'rst__rowLandingPad',\r\n                isLandingPadActive && !canDrop && 'rst__rowCancelPad',\r\n                isSearchMatch && 'rst__rowSearchMatch',\r\n                isSearchFocus && 'rst__rowSearchFocus',\r\n                rowDirectionClass,\r\n                className\r\n              )}\r\n              style={{\r\n                opacity: isDraggedDescendant ? 0.5 : 1,\r\n                ...style,\r\n              }}\r\n            >\r\n              {handle}\r\n\r\n              <div\r\n                className={classNames(\r\n                  'rst__rowContents',\r\n                  !canDrag && 'rst__rowContentsDragDisabled',\r\n                  rowDirectionClass\r\n                )}\r\n              >\r\n                <div className={classNames('rst__rowLabel', rowDirectionClass)}>\r\n                  <span\r\n                    className={classNames(\r\n                      'rst__rowTitle',\r\n                      node.subtitle && 'rst__rowTitleWithSubtitle'\r\n                    )}\r\n                  >\r\n                    {typeof nodeTitle === 'function'\r\n                      ? nodeTitle({\r\n                          node,\r\n                          path,\r\n                          treeIndex,\r\n                        })\r\n                      : nodeTitle}\r\n                  </span>\r\n\r\n                  {nodeSubtitle && (\r\n                    <span className=\"rst__rowSubtitle\">\r\n                      {typeof nodeSubtitle === 'function'\r\n                        ? nodeSubtitle({\r\n                            node,\r\n                            path,\r\n                            treeIndex,\r\n                          })\r\n                        : nodeSubtitle}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"rst__rowToolbar\">\r\n                  {buttons.map((btn, index) => (\r\n                    <div\r\n                      key={index} // eslint-disable-line react/no-array-index-key\r\n                      className=\"rst__toolbarButton\"\r\n                    >\r\n                      {btn}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTreeNodeContentRenderer.defaultProps = {\r\n  isSearchMatch: false,\r\n  isSearchFocus: false,\r\n  canDrag: false,\r\n  toggleChildrenVisibility: null,\r\n  buttons: [],\r\n  className: '',\r\n  style: {},\r\n  parentNode: null,\r\n  draggedNode: null,\r\n  canDrop: false,\r\n  title: null,\r\n  subtitle: null,\r\n  rowDirection: 'ltr',\r\n};\r\n\r\nTreeNodeContentRenderer.propTypes = {\r\n  node: PropTypes.shape({}).isRequired,\r\n  title: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\r\n  subtitle: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\r\n  path: PropTypes.arrayOf(\r\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n  ).isRequired,\r\n  treeIndex: PropTypes.number.isRequired,\r\n  treeId: PropTypes.string.isRequired,\r\n  isSearchMatch: PropTypes.bool,\r\n  isSearchFocus: PropTypes.bool,\r\n  canDrag: PropTypes.bool,\r\n  scaffoldBlockPxWidth: PropTypes.number.isRequired,\r\n  toggleChildrenVisibility: PropTypes.func,\r\n  buttons: PropTypes.arrayOf(PropTypes.node),\r\n  className: PropTypes.string,\r\n  style: PropTypes.shape({}),\r\n\r\n  // Drag and drop API functions\r\n  // Drag source\r\n  connectDragPreview: PropTypes.func.isRequired,\r\n  connectDragSource: PropTypes.func.isRequired,\r\n  parentNode: PropTypes.shape({}), // Needed for dndManager\r\n  isDragging: PropTypes.bool.isRequired,\r\n  didDrop: PropTypes.bool.isRequired,\r\n  draggedNode: PropTypes.shape({}),\r\n  // Drop target\r\n  isOver: PropTypes.bool.isRequired,\r\n  canDrop: PropTypes.bool,\r\n\r\n  // rtl support\r\n  rowDirection: PropTypes.string,\r\n};\r\n\r\nexport default TreeNodeContentRenderer;","import TreeNodeContentRenderer from './TreeNodeContentRenderer';\r\n\r\nexport default TreeNodeContentRenderer;","import { CrossIcon, IconButton, Switch, Text, TextInput, toaster, Tooltip } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport SortableTree, { getFlatDataFromTree, removeNodeAtPath, toggleExpandedForAll, getTreeFromFlatData } from 'react-sortable-tree';\r\nimport { Box, Flex } from 'rebass';\r\nimport { has, isArray, isEmpty, isString } from 'underscore';\r\nimport ErrorPanelCmp from './ErrorPanelCmp';\r\nimport SubPanelHeaderCmp from './SubPanelHeaderCmp';\r\nimport FlowTreePlaceholderRenderer from './FlowTreePlaceholderRenderer';\r\nimport jsonlint from 'jsonlint-mod';\r\nimport TreeNodeContentRenderer from './TreeNodeContentRenderer';\r\n\r\nclass FlowTreeEditor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            allNodesExpanded: true,\r\n        }\r\n        this.fileInputRef = React.createRef();\r\n    }\r\n\r\n    onTreeChange = (treeData) => {\r\n        const { setFlowTree, } = this.props;\r\n        setFlowTree(treeData);\r\n        this.updateFlowTreeExportNodes(treeData);\r\n    }\r\n\r\n    updateFlowTreeExportNodes = (treeData) => {\r\n        const { flowTreeExport, setFlowTreeExportNodes, setJsonEditorContent } = this.props;\r\n        const flatTreeData = getFlatDataFromTree({\r\n            treeData,\r\n            ignoreCollapsed: false,\r\n            getNodeKey: ({ treeIndex }) => treeIndex\r\n        }).map(({ node, path, treeIndex }) => ({\r\n            id: treeIndex,\r\n            name: node.title,\r\n            // The last entry in the path is this node's key\r\n            // The second to last entry (accessed here) is the parent node's key\r\n            parent: path.length > 1 ? path[path.length - 2] : null,\r\n        }));\r\n\r\n        setFlowTreeExportNodes(flatTreeData);\r\n\r\n        const newTreeExportData = {\r\n            ...flowTreeExport,\r\n            nodes: flatTreeData,\r\n        }\r\n        setJsonEditorContent(JSON.stringify(newTreeExportData, null, '\\t'));\r\n    }\r\n\r\n    onDeleteClick = (path) => {\r\n        const { flowTree, setFlowTree } = this.props;\r\n        const getNodeKey = ({ treeIndex }) => treeIndex;\r\n        const treeData = removeNodeAtPath({\r\n            treeData: flowTree,\r\n            path,\r\n            getNodeKey,\r\n        });\r\n\r\n        setFlowTree(treeData);\r\n        this.updateFlowTreeExportNodes(treeData);\r\n    }\r\n\r\n    canDrop = ({ node, nextParent, prevPath, nextPath }) => {\r\n        // prevents having multiple root nodes\r\n        const { flowTree } = this.props;\r\n        return flowTree.length === 0 || nextParent !== null;\r\n    };\r\n\r\n    onFlowTreeNameChange = (newName) => {\r\n        const { setFlowTreeExportName, flowTreeExport, setJsonEditorContent } = this.props;\r\n        setFlowTreeExportName(newName);\r\n\r\n        const newTreeExportData = {\r\n            ...flowTreeExport,\r\n            name: newName,\r\n        }\r\n        setJsonEditorContent(JSON.stringify(newTreeExportData, null, '\\t'));\r\n    }\r\n\r\n    onExpandAllNodesSwitchChange = e => {\r\n        const { flowTree, setFlowTree } = this.props;\r\n\r\n        this.setState({\r\n            allNodesExpanded: e.target.checked,\r\n        }, () => {\r\n            const newTreeData = toggleExpandedForAll({\r\n                treeData: flowTree,\r\n                expanded: e.target.checked,\r\n            })\r\n\r\n            setFlowTree(newTreeData);\r\n        });\r\n    }\r\n\r\n    onDrop = (files) => {\r\n        if (!isEmpty(files)) {\r\n            const fileReader = new FileReader();\r\n            fileReader.readAsText(files[0], \"UTF-8\");\r\n            fileReader.onload = e => {\r\n                try {\r\n                    const jsonStr = e.target.result;\r\n                    const jsonData = jsonlint.parse(jsonStr);\r\n\r\n                    if (has(jsonData, \"name\") && has(jsonData, \"nodes\") && isString(jsonData.name) && isArray(jsonData.nodes)) {\r\n                        let nullParentCount = 0;\r\n                        const newTreeFromFlatData = getTreeFromFlatData({\r\n                            flatData: jsonData.nodes.map(node => {\r\n                                if (node.parent === null) {\r\n                                    nullParentCount += 1;\r\n                                }\r\n                                return ({ \r\n                                    ...node, \r\n                                    title: node.name,\r\n                                    expanded: true,\r\n                                });\r\n                            }),\r\n                            getKey: node => node.id, // resolve a node's key\r\n                            getParentKey: node => node.parent, // resolve a node's parent's key\r\n                            rootKey: null, // The value of the parent key when there is no parent (i.e., at root level)\r\n                        });\r\n        \r\n                        if (nullParentCount > 1) {\r\n                            throw new Error(`Flow tree can only contain a single root node. Found ${nullParentCount} with null parent.`);\r\n                        }\r\n                        \r\n                        this.onFlowTreeNameChange(jsonData.name);\r\n                        this.onTreeChange(newTreeFromFlatData);\r\n\r\n                        toaster.success(\"File has been read successfully!\");\r\n                    } else {\r\n                        throw new Error(`JSON format must be { \"name\": \"tree-name\", \"nodes\": [] }`)\r\n                    }\r\n                } catch(err) {\r\n                    toaster.danger(`Error - ${err.message}`);\r\n                }\r\n            }\r\n            fileReader.onerror = e => {\r\n                toaster.danger(\"Failed to read file!\");\r\n                fileReader.abort();\r\n            }\r\n        }\r\n    }\r\n\r\n    clearAllNodes = () => {\r\n        const { flowTree } = this.props;\r\n\r\n        if (!isEmpty(flowTree)) {\r\n            this.onTreeChange([]);\r\n            toaster.notify(\"Flow tree nodes cleared!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            flowTree, \r\n            flowTreeParsingError,\r\n            flowTreeExportName,\r\n         } = this.props;\r\n        \r\n        return (\r\n            <Box height=\"100%\" width=\"100%\">\r\n                <Flex height=\"100%\" p={15} paddingTop={0} flexDirection=\"column\">\r\n                    <SubPanelHeaderCmp \r\n                        title=\"Flow Tree\"\r\n                        actionsCmp={\r\n                            <Flex\r\n                                flexDirection=\"row\"\r\n                                flexWrap=\"wrap\"\r\n                            >\r\n                                <Flex\r\n                                    flexDirection=\"column\"\r\n                                    justifyContent=\"center\"\r\n                                    marginRight=\"5px\"\r\n                                >\r\n                                    <Text fontSize={12}>Tree Name</Text>\r\n                                </Flex>\r\n                                <Flex \r\n                                    marginRight=\"15px\"\r\n                                    paddingRight=\"15px\"\r\n                                    sx={{\r\n                                        borderRight: \"1px solid #c8c8c8\"\r\n                                    }}\r\n                                >\r\n                                    <TextInput\r\n                                        required\r\n                                        value={flowTreeExportName}\r\n                                        placeholder=\"Enter flow tree name\"\r\n                                        onChange={e => this.onFlowTreeNameChange(e.target.value)}\r\n                                    />\r\n                                </Flex>\r\n                                <Flex\r\n                                    flexDirection=\"column\"\r\n                                    justifyContent=\"center\"\r\n                                    marginRight=\"5px\"\r\n                                >\r\n                                    <Text fontSize={12}>Expand All</Text>\r\n                                </Flex>\r\n                                <Flex\r\n                                    flexDirection=\"column\"\r\n                                    justifyContent=\"center\"\r\n                                    marginRight=\"15px\"\r\n                                    paddingRight=\"15px\"\r\n                                    sx={{\r\n                                        borderRight: \"1px solid #c8c8c8\"\r\n                                    }}\r\n                                >\r\n                                    <Switch \r\n                                        disabled={isEmpty(flowTree)}\r\n                                        checked={this.state.allNodesExpanded} \r\n                                        onChange={this.onExpandAllNodesSwitchChange} \r\n                                    />\r\n                                </Flex>\r\n                                <Flex>\r\n                                    <Tooltip content=\"Clear All\">   \r\n                                        <IconButton intent=\"danger\" icon={CrossIcon} onClick={this.clearAllNodes} />\r\n                                    </Tooltip>\r\n                                </Flex>\r\n                            </Flex>\r\n                        }\r\n                    />\r\n                    {\r\n                        isEmpty(flowTreeParsingError) ? ( \r\n                            <SortableTree\r\n                                innerStyle={{ padding: \"10px\"}}\r\n                                treeData={flowTree}\r\n                                dndType=\"FLOW_TREE_DND_TYPE\"\r\n                                onChange={this.onTreeChange}\r\n                                canDrop={this.canDrop}\r\n                                generateNodeProps={({ node, path }) => ({\r\n                                    buttons: [\r\n                                        <IconButton \r\n                                            icon={CrossIcon} \r\n                                            intent=\"danger\" \r\n                                            onClick={() => this.onDeleteClick(path)}\r\n                                            style={{\r\n                                                border: \"none\"\r\n                                            }}\r\n                                        />\r\n                                    ],\r\n                                })}\r\n                                nodeContentRenderer={TreeNodeContentRenderer}\r\n                                placeholderRenderer={({ isOver, canDrop }) => (\r\n                                    <FlowTreePlaceholderRenderer\r\n                                        onDrop={this.onDrop}\r\n                                        isOver={isOver}\r\n                                        canDrop={canDrop}\r\n                                    />\r\n                                )}\r\n\r\n                            />\r\n                        )\r\n                        :\r\n                        (\r\n                            <ErrorPanelCmp errorMessage={flowTreeParsingError} />\r\n                        )\r\n                    }\r\n                </Flex>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FlowTreeEditor;","import { connect } from \"react-redux\";\r\nimport * as GlobalActions from '../actions/globalActions';\r\nimport FlowTreeEditor from \"../components/FlowTreeEditorCmp\";\r\n\r\nconst mapStateToProps = (state , ownProps) => {\r\n    return {\r\n      isLoading: state.global.isLoading,\r\n      statusMessage: state.global.statusMessage,\r\n      flowTree: state.global.flowTreeTool.flowTree,\r\n      flowTreeParsingError: state.global.flowTreeTool.parsingError,\r\n      flowTreeExport: state.global.flowTreeTool.flowTreeExport,\r\n      flowTreeExportName: state.global.flowTreeTool.flowTreeExport.name,\r\n      flowTreeExportNodes: state.global.flowTreeTool.flowTreeExport.nodes,\r\n      jsonEditorContent: state.global.flowTreeTool.jsonEditorContent,\r\n      ...ownProps,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {       \r\n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\r\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\r\n        setFlowTree: (flowTree) => dispatch(GlobalActions.setFlowTree(flowTree)),\r\n        setFlowTreeExportName: (flowTreeExportName) => dispatch(GlobalActions.setFlowTreeExportName(flowTreeExportName)),\r\n        setFlowTreeExportNodes: (flowTreeExportNodes) => dispatch(GlobalActions.setFlowTreeExportNodes(flowTreeExportNodes)),\r\n        setJsonEditorContent: (jsonEditorContent) => dispatch(GlobalActions.setJsonEditorContent(jsonEditorContent)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(FlowTreeEditor);","import exportFromJSON from 'export-from-json';\r\nimport { isEmpty } from 'underscore';\r\n\r\n\r\nexport const exportDataToJsonFile = ({ fileName, jsonData }) => {\r\n    const newFileName = isEmpty(fileName) ? \"new-flow-tree\" : fileName;\r\n    exportFromJSON({ data: jsonData, fileName: newFileName, exportType: \"json\" });\r\n}","import React from 'react';\r\nimport AceEditor from \"react-ace\";\r\n\r\nimport \"ace-builds/src-noconflict/mode-json\";\r\n// themes\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\r\nimport \"ace-builds/src-noconflict/theme-kuroir\";\r\nimport \"ace-builds/src-noconflict/theme-twilight\";\r\nimport \"ace-builds/src-noconflict/theme-xcode\";\r\nimport \"ace-builds/src-noconflict/theme-textmate\";\r\nimport \"ace-builds/src-noconflict/theme-terminal\";\r\n\r\nimport { has, isArray, isEmpty, isString } from 'underscore';\r\nimport { getTreeFromFlatData } from 'react-sortable-tree';\r\nimport jsonlint from 'jsonlint-mod';\r\nimport { Box, Flex } from 'rebass';\r\nimport SubPanelHeaderCmp from './SubPanelHeaderCmp';\r\nimport { Button, CaretDownIcon, ClipboardIcon, DownloadIcon, ImportIcon, Menu, Popover, Position, SelectMenu, Text, toaster } from 'evergreen-ui';\r\nimport { exportDataToJsonFile } from '../utils';\r\nimport CopyToClipboard from 'react-copy-to-clipboard';\r\n\r\nclass JsonEditorCmp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            editorTheme: {\r\n                label: \"Github\",\r\n                theme: \"github\",\r\n            },\r\n        }\r\n\r\n        this.fileInputRef = React.createRef();\r\n    }\r\n\r\n    editorThemeList = [\r\n        {\r\n            label: \"Monokai\",\r\n            theme: \"monokai\",\r\n        },\r\n        {\r\n            label: \"Github\",\r\n            theme: \"github\",\r\n        },\r\n        {\r\n            label: \"Tomorrow\",\r\n            theme: \"tomorrow\",\r\n        },\r\n        {\r\n            label: \"Kuroir\",\r\n            theme: \"kuroir\",\r\n        },\r\n        {\r\n            label: \"Twilight\",\r\n            theme: \"twilight\",\r\n        },\r\n        {\r\n            label: \"Xcode\",\r\n            theme: \"xcode\",\r\n        },\r\n        {\r\n            label: \"Textmate\",\r\n            theme: \"textmate\",\r\n        },\r\n        {\r\n            label: \"Terminal\",\r\n            theme: \"terminal\",\r\n        }\r\n    ]\r\n\r\n    onChange = (newValue) => {\r\n        const { setJsonEditorContent } = this.props;\r\n        setJsonEditorContent && setJsonEditorContent(newValue);\r\n\r\n        this.updateTreeDataFromJson(newValue);\r\n    }\r\n\r\n    updateTreeDataFromJson = (jsonStr) => {\r\n        const { \r\n            setFlowTree, \r\n            setFlowTreeExportName, \r\n            setFlowTreeExportNodes, \r\n            setFlowTreeParsingError,\r\n        } = this.props;\r\n\r\n        if (isEmpty(jsonStr)) {\r\n            setFlowTreeExportName(\"\");\r\n            setFlowTreeExportNodes([]);\r\n            setFlowTree([]);\r\n            setFlowTreeParsingError(\"\");\r\n        } else {\r\n            try {\r\n                const flowTreeExportFromJSON = jsonlint.parse(jsonStr);\r\n\r\n                if (has(flowTreeExportFromJSON, \"name\") \r\n                    && has(flowTreeExportFromJSON, \"nodes\") \r\n                    && isString(flowTreeExportFromJSON.name) \r\n                    && isArray(flowTreeExportFromJSON.nodes)) {\r\n                        let nullParentCount = 0;\r\n                        const newTreeFromFlatData = getTreeFromFlatData({\r\n                            flatData: flowTreeExportFromJSON.nodes.map(node => {\r\n                                if (node.parent === null) {\r\n                                    nullParentCount += 1;\r\n                                }\r\n                                return ({ \r\n                                    ...node, \r\n                                    title: node.name,\r\n                                    expanded: true,\r\n                                });\r\n                            }),\r\n                            getKey: node => node.id, // resolve a node's key\r\n                            getParentKey: node => node.parent, // resolve a node's parent's key\r\n                            rootKey: null, // The value of the parent key when there is no parent (i.e., at root level)\r\n                        });\r\n        \r\n                        if (nullParentCount > 1) {\r\n                            throw new Error(`Flow tree can only contain a single root node. Found ${nullParentCount} with null parent.`);\r\n                        }\r\n        \r\n                        setFlowTreeExportName(flowTreeExportFromJSON.name);\r\n                        setFlowTreeExportNodes(flowTreeExportFromJSON.nodes);\r\n                        setFlowTree(newTreeFromFlatData);\r\n                        setFlowTreeParsingError(\"\");\r\n                } else {\r\n                    throw new Error(`JSON format must be { \"name\": \"tree-name\", \"nodes\": [] }`)\r\n                }\r\n            } catch(err) {\r\n                setFlowTreeParsingError(err.message || \"\");\r\n                setFlowTreeExportName(\"\");\r\n                setFlowTreeExportNodes([]);\r\n                setFlowTree([]);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFileUpload = (e) => {\r\n        const fileReader = new FileReader();\r\n        fileReader.readAsText(e.target.files[0], \"UTF-8\");\r\n        fileReader.onload = e => {\r\n            try {\r\n                const jsonStr = e.target.result;\r\n                const jsonData = jsonlint.parse(jsonStr);\r\n\r\n                if (has(jsonData, \"name\") && has(jsonData, \"nodes\") && isString(jsonData.name) && isArray(jsonData.nodes)) {\r\n                    this.onChange(e.target.result);\r\n                    toaster.success(\"File has been read successfully!\");\r\n                } else {\r\n                    throw new Error(`JSON format must be { \"name\": \"tree-name\", \"nodes\": [] }`)\r\n                }\r\n            } catch(err) {\r\n                toaster.danger(`Error - ${err.message}`);\r\n            }\r\n        }\r\n        fileReader.onerror = e => {\r\n            toaster.danger(\"Failed to read file!\");\r\n            fileReader.abort();\r\n        }\r\n    }\r\n\r\n    onExportBtnClick = () => {\r\n        const { flowTreeExportName, jsonEditorContent } = this.props;\r\n        const jsonData = JSON.parse(jsonEditorContent);\r\n        exportDataToJsonFile({ fileName: flowTreeExportName, jsonData });\r\n    }\r\n\r\n    renderThemeList = () => {\r\n        const { editorTheme } = this.state;\r\n        // return (\r\n        //     <Menu>\r\n        //         <Menu.Group>\r\n        //             { this.editorThemeList.map(({ label, theme }) => (\r\n        //                 <Menu.Item key={theme} iconBefore={isEqual(editorTheme.theme, theme) ? TickIcon : null} onSelect={() => this.setState({ editorTheme: { label, theme} })}>{ label }</Menu.Item>\r\n        //             ))}\r\n        //         </Menu.Group>\r\n        //     </Menu>\r\n        // )\r\n        return (\r\n            <SelectMenu\r\n                title=\"Editor Theme\"\r\n                options={this.editorThemeList.map(({label, theme}) => ({ label, value: theme }))}\r\n                selected={editorTheme.theme}\r\n                onSelect={(item) => this.setState({\r\n                    editorTheme: {\r\n                        label: item.label,\r\n                        theme: item.value,\r\n                    }\r\n                })}\r\n                >\r\n                <Button>{editorTheme.label || 'Select theme...'}</Button>\r\n            </SelectMenu>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { jsonEditorContent, flowTreeExportName, flowTreeExportNodes } = this.props;\r\n        \r\n        return (\r\n            <Box width=\"100%\" height=\"100%\">\r\n                <Flex height=\"100%\" p={15} paddingTop={0} flexDirection=\"column\">\r\n                    <SubPanelHeaderCmp \r\n                        title=\"Flow Tree JSON\"\r\n                        actionsCmp={\r\n                            <Flex\r\n                                flexDirection=\"row\"\r\n                                flexWrap=\"wrap\"\r\n                            >\r\n                                <Flex\r\n                                    marginRight=\"15px\"\r\n                                    paddingRight=\"15px\"\r\n                                    sx={{\r\n                                        borderRight: \"1px solid #c8c8c8\"\r\n                                    }}\r\n                                >\r\n                                    <Popover\r\n                                        position={Position.BOTTOM_RIGHT}\r\n                                        content={\r\n                                            <Menu>\r\n                                                <Menu.Group>\r\n                                                    <Menu.Item icon={ImportIcon} onSelect={ () => this.fileInputRef.current.click() }>\r\n                                                        <Flex>\r\n                                                            <input\r\n                                                                ref={this.fileInputRef}\r\n                                                                onChange={this.handleFileUpload}\r\n                                                                type=\"file\"\r\n                                                                style={{ display: \"none\" }}\r\n                                                                accept=\"application/JSON\"\r\n                                                            />\r\n                                                            Import JSON\r\n                                                        </Flex>\r\n                                                    </Menu.Item>\r\n                                                    <Menu.Divider />\r\n                                                    <Menu.Item \r\n                                                        icon={DownloadIcon}\r\n                                                        disabled={isEmpty(flowTreeExportName) || isEmpty(flowTreeExportNodes)} \r\n                                                        onSelect={ () => this.onExportBtnClick() }\r\n                                                    >\r\n                                                        Export JSON\r\n                                                    </Menu.Item>\r\n                                                </Menu.Group>\r\n                                            </Menu>\r\n                                        }\r\n                                    >\r\n                                        <Button iconAfter={CaretDownIcon}>File</Button>\r\n                                    </Popover>\r\n                                </Flex>\r\n                                <Flex>\r\n                                    <CopyToClipboard disabled={isEmpty(jsonEditorContent)} text={jsonEditorContent} onCopy={() => toaster.notify(\"Flow tree JSON copied to clipboard!\")}>\r\n                                        <Button iconBefore={ClipboardIcon}>Copy</Button>\r\n                                    </CopyToClipboard>\r\n                                </Flex>\r\n                            </Flex>\r\n                        }\r\n                    />\r\n                    <AceEditor\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        mode=\"json\"\r\n                        theme={this.state.editorTheme.theme}\r\n                        onChange={this.onChange}\r\n                        value={jsonEditorContent}\r\n                        name=\"flow-tree-json-editor\"\r\n                        editorProps={{ $blockScrolling: true }}\r\n                        setOptions={{\r\n                            enableBasicAutocompletion: true,\r\n                            enableLiveAutocompletion: true,\r\n                            enableSnippets: true\r\n                        }}\r\n                    />\r\n                    <Flex\r\n                        flexDirection=\"row\"\r\n                        width=\"100%\"\r\n                        justifyContent=\"flex-end\"\r\n                        paddingTop={15}\r\n                    >\r\n                        <Flex\r\n                            flexDirection=\"column\"\r\n                            justifyContent=\"center\"\r\n                            marginRight=\"15px\"\r\n                        >\r\n                            <Text fontSize={12} fontWeight=\"bold\">Editor Theme</Text>\r\n                        </Flex>\r\n                        { this.renderThemeList() }\r\n                        {/* <Popover\r\n                            position={Position.TOP_RIGHT}\r\n                            content={this.renderThemeList()}\r\n                            >\r\n                                <Button iconAfter={CaretUpIcon}>{`Theme - ${this.state.editorTheme.label}`}</Button>\r\n                            </Popover> */}\r\n                    </Flex>\r\n                </Flex>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JsonEditorCmp;","import { connect } from \"react-redux\";\r\nimport * as GlobalActions from '../actions/globalActions';\r\nimport JsonEditorCmp from \"../components/JsonEditorCmp\";\r\n\r\nconst mapStateToProps = (state , ownProps) => {\r\n    return {\r\n      isLoading: state.global.isLoading,\r\n      statusMessage: state.global.statusMessage,\r\n      flowTree: state.global.flowTreeTool.flowTree,\r\n      flowTreeExport: state.global.flowTreeTool.flowTreeExport,\r\n      flowTreeExportName: state.global.flowTreeTool.flowTreeExport.name,\r\n      flowTreeExportNodes: state.global.flowTreeTool.flowTreeExport.nodes,\r\n      jsonEditorContent: state.global.flowTreeTool.jsonEditorContent,\r\n      ...ownProps,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {       \r\n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\r\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\r\n        setFlowTree: (flowTree) => dispatch(GlobalActions.setFlowTree(flowTree)),\r\n        setFlowTreeParsingError: (flowTreeParsingError) => dispatch(GlobalActions.setFlowTreeParsingError(flowTreeParsingError)),\r\n        setFlowTreeExportName: (flowTreeExportName) => dispatch(GlobalActions.setFlowTreeExportName(flowTreeExportName)),\r\n        setFlowTreeExportNodes: (flowTreeExportNodes) => dispatch(GlobalActions.setFlowTreeExportNodes(flowTreeExportNodes)),\r\n        setJsonEditorContent: (jsonEditorContent) => dispatch(GlobalActions.setJsonEditorContent(jsonEditorContent)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(JsonEditorCmp);","import { Button, Dialog, IconButton, PlusIcon, TextInputField, Tooltip } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport { Box, Flex } from 'rebass';\r\n\r\nconst AddNodeCmp = ({ onAddNode }) => {\r\n    const [isShown, setIsShown] = React.useState(false);\r\n    const [nodeNameVal, setNodeNameVal] = React.useState('');\r\n\r\n\r\n    const onDialogClose = () => {\r\n        setNodeNameVal(\"\");\r\n        setIsShown(false)\r\n    }\r\n\r\n    const onAddBtnClick = () => {\r\n        onAddNode(nodeNameVal);\r\n        onDialogClose();\r\n    };\r\n\r\n    return (\r\n        <Box \r\n            marginRight=\"5px\"\r\n        >\r\n            <Dialog\r\n                isShown={isShown}\r\n                title=\"Add Node\"\r\n                onCloseComplete={onDialogClose}\r\n                hasFooter={false}\r\n            >\r\n                <Flex width=\"100%\" flexDirection=\"column\" paddingBottom={15}>\r\n                    <TextInputField\r\n                        required\r\n                        label=\"Node name\"\r\n                        value={nodeNameVal}\r\n                        onChange={e => setNodeNameVal(e.target.value)}\r\n                    />\r\n                    <Flex flexDirection=\"row\" marginTop={15} justifyContent=\"flex-end\">\r\n                        <Button \r\n                            marginRight={15} \r\n                            intent=\"danger\"\r\n                            onClick={onDialogClose}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={onAddBtnClick}>Add</Button>\r\n                    </Flex>\r\n                </Flex>\r\n            </Dialog>\r\n            <Tooltip content=\"Add Node\">\r\n                <IconButton icon={PlusIcon} onClick={() => setIsShown(true)} />\r\n            </Tooltip>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default AddNodeCmp;","import { AddIcon, Button, CaretDownIcon, CrossIcon, DownloadIcon, IconButton, ImportIcon, Menu, Popover, Position, toaster, Tooltip } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport SortableTree, { removeNodeAtPath } from 'react-sortable-tree';\r\nimport { Box, Flex } from 'rebass';\r\nimport { has, isArray, isEmpty } from 'underscore';\r\nimport AddNodeCmp from './AddNodeCmp';\r\nimport SubPanelHeaderCmp from './SubPanelHeaderCmp';\r\nimport jsonlint from 'jsonlint-mod';\r\nimport { exportDataToJsonFile } from '../utils';\r\nimport FileDropZone from './FileDropZone';\r\nimport InstructionsCmp from './InstructionsCmp';\r\nimport TreeNodeContentRenderer from './TreeNodeContentRenderer';\r\n\r\nclass NodesPanelCmp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.fileInputRef = React.createRef();\r\n    }\r\n\r\n    onTreeChange = (treeData) => {\r\n        const { setAvailableNodes } = this.props;\r\n\r\n        const newTreeData = treeData.map(({ title }) => ({\r\n            name: title,\r\n        }));\r\n        setAvailableNodes(newTreeData);\r\n    }\r\n\r\n    onDeleteClick = (path) => {\r\n        const { availableNodes, setAvailableNodes } = this.props;\r\n        const getNodeKey = ({ treeIndex }) => treeIndex;\r\n        const treeData = removeNodeAtPath({\r\n            treeData: availableNodes,\r\n            path,\r\n            getNodeKey,\r\n        });\r\n\r\n        setAvailableNodes(treeData);\r\n    }\r\n\r\n\r\n    onAddNode = (nodeName) => {\r\n        const { availableNodes, setAvailableNodes } = this.props;\r\n\r\n        const treeData = availableNodes.concat({\r\n            name: nodeName\r\n        });\r\n\r\n        setAvailableNodes(treeData);\r\n    }\r\n\r\n    getAvailableNodes = () => {\r\n        const { availableNodes } = this.props;\r\n        \r\n        if (isEmpty(availableNodes)) {\r\n            return [];\r\n        } else {\r\n            return availableNodes.map(({ name }) => ({\r\n                title: name,\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleFileUpload = (e) => {\r\n        this.readJSONFileContent(e.target.files[0]);\r\n    }\r\n\r\n    readJSONFileContent = file => {\r\n        const { setAvailableNodes } = this.props;\r\n        const fileReader = new FileReader();\r\n        fileReader.readAsText(file, \"UTF-8\");\r\n        fileReader.onload = e => {\r\n            try {\r\n                const jsonData = jsonlint.parse(e.target.result);\r\n                if (has(jsonData, \"availableNodes\") && isArray(jsonData.availableNodes)) {\r\n                    setAvailableNodes(jsonData.availableNodes);\r\n                    toaster.success(\"File has been read successfully!\");\r\n                } else {\r\n                    throw new Error(`JSON format must be: { \"availableNodes\": [] }`);\r\n                }\r\n            } catch(err) {\r\n                toaster.danger(`Error - ${err.message}`);\r\n            }\r\n        }\r\n        fileReader.onerror = e => {\r\n            toaster.danger(\"Failed to read file!\");\r\n            fileReader.abort();\r\n        }\r\n    }\r\n\r\n    onExportBtnClick = () => {\r\n        const { availableNodes } = this.props;\r\n        const jsonData = {\r\n            availableNodes,\r\n        };\r\n\r\n        exportDataToJsonFile({ fileName: \"flow-tree-available-nodes\", jsonData });\r\n    }\r\n\r\n    onDrop = (files) => {\r\n        if (!isEmpty(files)) {\r\n            this.readJSONFileContent(files[0]);\r\n        }\r\n    }\r\n\r\n    clearAllNodes = () => {\r\n        const { availableNodes, setAvailableNodes } = this.props;\r\n    \r\n        if (!isEmpty(availableNodes)) {\r\n            setAvailableNodes([]);\r\n            toaster.notify(\"Available nodes cleared!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { availableNodes } = this.props;\r\n\r\n        return (\r\n            <Box width=\"100%\" height=\"100%\">\r\n                <Flex height=\"100%\" p={15} paddingTop={0} flexDirection=\"column\">\r\n                    <SubPanelHeaderCmp \r\n                        title=\"Nodes\"\r\n                        actionsCmp={\r\n                            <Flex\r\n                                flexDirection=\"row\"\r\n                                flexWrap=\"wrap\"\r\n                            >\r\n                                <Flex\r\n                                    marginRight=\"15px\"\r\n                                    paddingRight=\"15px\"\r\n                                    sx={{\r\n                                        borderRight: \"1px solid #c8c8c8\"\r\n                                    }}\r\n                                >\r\n                                    <Popover\r\n                                        position={Position.BOTTOM_RIGHT}\r\n                                        content={\r\n                                            <Menu>\r\n                                                <Menu.Group>\r\n                                                    <Menu.Item icon={ImportIcon} onSelect={ () => this.fileInputRef.current.click() }>\r\n                                                        <Flex>\r\n                                                            <input\r\n                                                                ref={this.fileInputRef}\r\n                                                                onChange={this.handleFileUpload}\r\n                                                                type=\"file\"\r\n                                                                style={{ display: \"none\" }}\r\n                                                                accept=\"application/JSON\"\r\n                                                            />\r\n                                                            Import JSON\r\n                                                        </Flex>\r\n                                                    </Menu.Item>\r\n                                                    <Menu.Divider />\r\n                                                    <Menu.Item \r\n                                                        icon={DownloadIcon}\r\n                                                        disabled={isEmpty(availableNodes)} \r\n                                                        onSelect={ () => this.onExportBtnClick() }\r\n                                                    >\r\n                                                        Export JSON\r\n                                                    </Menu.Item>\r\n                                                </Menu.Group>\r\n                                            </Menu>\r\n                                        }\r\n                                    >\r\n                                        <Button iconAfter={CaretDownIcon}>File</Button>\r\n                                    </Popover>\r\n                                </Flex>\r\n                                <AddNodeCmp onAddNode={this.onAddNode} />\r\n                                <Flex>\r\n                                    <Tooltip content=\"Clear All\">   \r\n                                        <IconButton intent=\"danger\" icon={CrossIcon} onClick={this.clearAllNodes} />\r\n                                    </Tooltip>\r\n                                </Flex>\r\n                            </Flex>\r\n                        }\r\n                    />\r\n                     {\r\n                        isEmpty(availableNodes) ? (\r\n                            <FileDropZone  onDrop={this.onDrop}>\r\n                                <InstructionsCmp\r\n                                    icon={AddIcon}\r\n                                >\r\n                                    Add Nodes or Import JSON File\r\n                                </InstructionsCmp>\r\n                            </FileDropZone>\r\n                        )\r\n                        :\r\n                        (\r\n                            <SortableTree\r\n                                treeData={this.getAvailableNodes()}\r\n                                dndType=\"FLOW_TREE_DND_TYPE\"\r\n                                innerStyle={{ padding: \"10px\"}}\r\n                                onChange={this.onTreeChange}\r\n                                shouldCopyOnOutsideDrop={true}\r\n                                canNodeHaveChildren={node => false}\r\n                                canDrop={node => false}\r\n                                generateNodeProps={({ node, path }) => ({\r\n                                    buttons: [\r\n                                        <IconButton \r\n                                            icon={CrossIcon} \r\n                                            intent=\"danger\" \r\n                                            onClick={() => this.onDeleteClick(path)}\r\n                                            style={{\r\n                                                border: \"none\"\r\n                                            }}\r\n                                        />\r\n                                    ],\r\n                                })}\r\n                                nodeContentRenderer={TreeNodeContentRenderer}\r\n                            />\r\n                        )\r\n                    }\r\n                </Flex>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodesPanelCmp;","import { connect } from \"react-redux\";\r\nimport * as GlobalActions from '../actions/globalActions';\r\nimport NodesPanelCmp from \"../components/NodesPanelCmp\";\r\n\r\nconst mapStateToProps = (state , ownProps) => {\r\n    return {\r\n      isLoading: state.global.isLoading,\r\n      statusMessage: state.global.statusMessage,\r\n      availableNodes: state.global.flowTreeTool.availableNodes,\r\n      ...ownProps,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {       \r\n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\r\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\r\n        setAvailableNodes: (availableNodes) => dispatch(GlobalActions.setAvailableNodes(availableNodes)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(NodesPanelCmp);","import React from 'react';\r\nimport { Flex, Box } from 'rebass';\r\nimport BaseContentCmp from '../../components/BaseContentCmp';\r\nimport FlowTreeEditorContainer from '../../containers/FlowTreeEditorContainer';\r\nimport JsonEditorContainer from '../../containers/JsonEditorContainer';\r\nimport NodesPanelContainer from '../../containers/NodesPanelContainer';\r\n\r\nconst FlowTreeTool = () => {\r\n    return (\r\n        <BaseContentCmp \r\n            title=\"Flow Tree Generator\" \r\n            withLinkToHome\r\n        >\r\n            <Flex\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                paddingTop={60}\r\n                sx={{\r\n                    position: \"fixed\",\r\n                    top: 0,\r\n                    left: 0,\r\n                }}\r\n            >\r\n                <Box\r\n                    width={2/8}\r\n                    sx={{\r\n                        borderRight: \"1px solid #d8d8d8\"\r\n                    }}\r\n                >\r\n                    <NodesPanelContainer />\r\n                </Box>\r\n                <Box\r\n                    width={4/8}\r\n                    sx={{\r\n                        borderRight: \"1px solid #d8d8d8\"\r\n                    }}\r\n                >\r\n                    <FlowTreeEditorContainer />\r\n                </Box>\r\n                <Box\r\n                    width={2/8}\r\n                >\r\n                    <JsonEditorContainer />\r\n                </Box>\r\n            </Flex>\r\n        </BaseContentCmp>\r\n    )\r\n}\r\n\r\nexport default FlowTreeTool;","import { connect } from \"react-redux\";\r\nimport * as GlobalActions from '../../actions/globalActions';\r\nimport FlowTreeTool from './FlowTreeTool';\r\n\r\nconst mapStateToProps = (state , ownProps) => {\r\n    return {\r\n      isLoading: state.global.isLoading,\r\n      statusMessage: state.global.statusMessage,\r\n      flowTreeExportName: state.global.flowTreeTool.flowTreeExport.name,\r\n      jsonEditorContent: state.global.flowTreeTool.jsonEditorContent,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {       \r\n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\r\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(FlowTreeTool);","import { HomeIcon, Button } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Flex, Text } from 'rebass';\r\n\r\nconst PageNotFoundCmp = () => {\r\n    return (\r\n        <Flex \r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            sx={{\r\n                position: \"fixed\",\r\n                top: 0,\r\n                left: 0\r\n            }}\r\n        >\r\n            <Flex\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Flex \r\n                    flexDirection=\"column\" \r\n                    justifyContent=\"center\" \r\n                    alignItems=\"center\"\r\n                >\r\n                    <Text fontSize=\"3em\">¯\\_(ツ)_/¯</Text>\r\n                    <Text fontSize=\"12em\">404</Text>\r\n                    <Text fontSize=\"1.5em\">The page does not exist.</Text>\r\n                    <Link to=\"/\" style={{ textDecoration: \"none\", color: \"black\", padding: \"15px\"}}>\r\n                        <Button iconBefore={HomeIcon} size=\"large\" marginRight={10}>\r\n                            Go Home\r\n                        </Button>\r\n                    </Link>\r\n                </Flex>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default PageNotFoundCmp;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Box } from 'rebass';\r\nimport './App.css';\r\nimport Home from './pages/Home';\r\nimport FlowTreeTool from './pages/FlowTreeTool';\r\nimport PageNotFoundCmp from './components/PageNotFoundCmp';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Box width=\"100%\" height=\"100%\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/flowtreetool\" component={FlowTreeTool} />\r\n          <Route component={PageNotFoundCmp} />\r\n        </Switch>\r\n      </Box>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as ACTIONS from '../constants/actions';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    statusMessage: \"\",\r\n    flowTreeTool: {\r\n        availableNodes: [],\r\n        jsonEditorContent: \"\",\r\n        flowTree: [],\r\n        flowTreeExport: {\r\n            name: \"\",\r\n            nodes: [],\r\n        },\r\n        parsingError: \"\",\r\n    }\r\n};\r\n\r\nconst globalReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTIONS.RESET_STATE: {\r\n            return {\r\n                ...initialState,\r\n            };\r\n        }\r\n        case ACTIONS.SET_STATUS_MESSAGE: {\r\n            const { statusMessage } = action.payload;\r\n    \r\n            return {\r\n                ...state,\r\n                statusMessage,\r\n            }\r\n        }\r\n        case ACTIONS.SET_IS_LOADING: {\r\n            const { isLoading } = action.payload;\r\n    \r\n            return {\r\n                ...state,\r\n                isLoading,\r\n            }\r\n        }\r\n        case ACTIONS.SET_FLOW_TREE: {\r\n            const { flowTree } = action.payload;\r\n            return {\r\n                ...state,\r\n                flowTreeTool: {\r\n                    ...state.flowTreeTool,\r\n                    flowTree,\r\n                },\r\n            }\r\n        }\r\n        case ACTIONS.SET_FLOW_TREE_EXPORT_NAME: {\r\n            const { flowTreeExportName } = action.payload;\r\n            return {\r\n                ...state,\r\n                flowTreeTool: {\r\n                    ...state.flowTreeTool,\r\n                    flowTreeExport: {\r\n                        ...state.flowTreeTool.flowTreeExport,\r\n                        name: flowTreeExportName,\r\n                    },\r\n                },\r\n            }\r\n        }\r\n        case ACTIONS.SET_FLOW_TREE_EXPORT_NODES: {\r\n            const { flowTreeExportNodes } = action.payload;\r\n            return {\r\n                ...state,\r\n                flowTreeTool: {\r\n                    ...state.flowTreeTool,\r\n                    flowTreeExport: {\r\n                        ...state.flowTreeTool.flowTreeExport,\r\n                        nodes: flowTreeExportNodes,\r\n                    },\r\n                },\r\n            }\r\n        }\r\n        case ACTIONS.SET_AVAILABLE_NODES: {\r\n            const { availableNodes } = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                flowTreeTool: {\r\n                    ...state.flowTreeTool,\r\n                    availableNodes,\r\n                },\r\n            }\r\n        }\r\n        case ACTIONS.SET_JSON_EDITOR_CONTENT: {\r\n            const { jsonEditorContent } = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                flowTreeTool: {\r\n                    ...state.flowTreeTool,\r\n                    jsonEditorContent,\r\n                },\r\n            }\r\n        }\r\n        case ACTIONS.SET_FLOW_TREE_PARSING_ERROR: {\r\n            const { parsingError } = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                flowTreeTool: {\r\n                    ...state.flowTreeTool,\r\n                    parsingError,\r\n                },\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default globalReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport globalReducer from './global'\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst globalPersistConfig = {\r\n    key: 'global',\r\n    storage: storage,\r\n    whitelist: [], // specify which ones to persist offline\r\n  }\r\n\r\nexport default combineReducers({ \r\n    global: persistReducer(globalPersistConfig, globalReducer)\r\n});","import { createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2'\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    blacklist: ['global'],\r\n    stateReconciler: autoMergeLevel2\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nexport const store = createStore(\r\n    persistedReducer, /* preloadedState, */\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport const persistor = persistStore(store);\r\n/* eslint-enable */","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-sortable-tree/style.css'; \r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store, persistor } from \"./store\";\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sortabletree__placeholder\":\"styles_sortabletree__placeholder__3WEQq\",\"rst__placeholderLandingPad\":\"styles_rst__placeholderLandingPad__3h_wb\",\"rst__placeholderCancelPad\":\"styles_rst__placeholderCancelPad__2ulPZ\"};"],"sourceRoot":""}