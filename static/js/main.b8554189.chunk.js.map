{"version":3,"sources":["constants/actions.js","actions/globalActions.js","components/BaseContentCmp.js","pages/Home/Home.js","pages/Home/index.js","components/ErrorPanelCmp.js","components/InstructionsCmp.js","components/SubPanelHeaderCmp.js","components/FlowTreeEditorCmp.js","containers/FlowTreeEditorContainer.js","utils.js","components/JsonEditorCmp.js","containers/JsonEditorContainer.js","components/AddNodeCmp.js","components/NodesPanelCmp.js","containers/NodesPanelContainer.js","pages/FlowTreeTool/FlowTreeTool.js","pages/FlowTreeTool/index.js","components/PageNotFoundCmp.js","App.js","reportWebVitals.js","reducers/global.js","reducers/index.js","store.js","index.js"],"names":["SET_IS_LOADING","RESET_STATE","SET_STATUS_MESSAGE","SET_FLOW_TREE","SET_FLOW_TREE_EXPORT_NAME","SET_FLOW_TREE_EXPORT_NODES","SET_AVAILABLE_NODES","SET_JSON_EDITOR_CONTENT","SET_FLOW_TREE_PARSING_ERROR","setStatusMessage","statusMessage","type","ACTIONS","payload","setIsLoading","isLoading","setFlowTree","flowTree","setFlowTreeExportName","flowTreeExportName","setFlowTreeExportNodes","flowTreeExportNodes","setJsonEditorContent","jsonEditorContent","BaseContentCmp","title","withLinkToHome","description","children","navChildren","width","height","p","bg","alignItems","sx","borderBottom","position","top","left","zIndex","marginRight","to","style","textDecoration","color","ArrowLeftIcon","size","fontSize","fontWeight","mx","paddingTop","Home","props","renderToolIcons","flexDirection","flexWrap","justifyContent","map","tool","idx","my","borderRadius","link","Avatar","name","px","py","this","Component","connect","state","ownProps","global","dispatch","GlobalActions","ErrorPanelCmp","errorMessage","padding","backgroundColor","marginBottom","Text","lineHeight","InstructionsCmp","icon","textAlign","SubPanelHeaderCmp","actionsCmp","FlowTreeEditor","onTreeChange","treeData","updateFlowTreeExportNodes","flowTreeExport","flatTreeData","getFlatDataFromTree","ignoreCollapsed","getNodeKey","treeIndex","node","path","id","parent","length","newTreeExportData","nodes","JSON","stringify","onDeleteClick","removeNodeAtPath","canDrop","nextParent","prevPath","nextPath","onFlowTreeNameChange","e","newName","target","value","onExpandAllNodesSwitchChange","setState","allNodesExpanded","checked","newTreeData","toggleExpandedForAll","expanded","fileInputRef","React","createRef","flowTreeParsingError","paddingRight","borderRight","TextInput","required","placeholder","onChange","Switch","disabled","isEmpty","Fragment","innerStyle","dndType","generateNodeProps","buttons","IconButton","CrossIcon","intent","onClick","AddIcon","flowTreeTool","parsingError","exportDataToJsonFile","fileName","jsonData","newFileName","exportFromJSON","data","exportType","JsonEditorCmp","newValue","updateTreeDataFromJson","jsonStr","setFlowTreeParsingError","flowTreeExportFromJSON","jsonlint","parse","has","isString","isArray","Error","nullParentCount","flatDataFromJsonEditor","getTreeFromFlatData","flatData","getKey","getParentKey","rootKey","err","console","log","message","handleFileUpload","fileReader","FileReader","readAsText","files","onload","result","toaster","success","danger","onerror","abort","onExportBtnClick","onExportJSON","text","onCopy","notify","Button","iconBefore","ClipboardIcon","Popover","Position","BOTTOM_RIGHT","content","Menu","Group","Item","ImportIcon","onSelect","current","click","ref","display","accept","Divider","DownloadIcon","iconAfter","CaretDownIcon","mode","theme","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","AddNodeCmp","onAddNode","useState","isShown","setIsShown","nodeNameVal","setNodeNameVal","onDialogClose","Dialog","onCloseComplete","hasFooter","paddingBottom","TextInputField","label","marginTop","PlusIcon","NodesPanelCmp","setAvailableNodes","availableNodes","nodeName","concat","getAvailableNodes","shouldCopyOnOutsideDrop","canNodeHaveChildren","FlowTreeTool","NodesPanelContainer","FlowTreeEditorContainer","JsonEditorContainer","PageNotFoundCmp","HomeIcon","App","basename","process","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","globalPersistConfig","key","storage","whitelist","combineReducers","persistReducer","action","persistConfig","blacklist","stateReconciler","autoMergeLevel2","persistedReducer","rootReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"6PAAaA,EAAiB,iBACjBC,EAAc,cACdC,EAAqB,qBACrBC,EAAgB,gBAChBC,EAA4B,4BAC5BC,EAA6B,6BAC7BC,EAAsB,sBACtBC,EAA0B,0BAC1BC,EAA8B,8BCD9BC,EAAmB,SAAAC,GAAa,MAAK,CAC9CC,KAAMC,EACNC,QAAS,CACLH,mBAIKI,EAAe,SAAAC,GAAS,MAAK,CACtCJ,KAAMC,EACNC,QAAS,CACLE,eAIKC,EAAc,SAAAC,GAAQ,MAAK,CACpCN,KAAMC,EACNC,QAAS,CACLI,cAIKC,EAAwB,SAAAC,GAAkB,MAAK,CACxDR,KAAMC,EACNC,QAAS,CACLM,wBAIKC,EAAyB,SAAAC,GAAmB,MAAK,CAC1DV,KAAMC,EACNC,QAAS,CACLQ,yBAWKC,EAAuB,SAAAC,GAAiB,MAAK,CACtDZ,KAAMC,EACNC,QAAS,CACLU,uB,iECCOC,EA/CQ,SAAC,GAA4E,IAA1EC,EAAyE,EAAzEA,MAAoBC,GAAqD,EAAlEC,YAAkE,EAArDD,gBAAgBE,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,YAA2B,iFAC/F,OACI,eAAC,IAAD,CACIC,MAAM,OACNC,OAAO,OAFX,UAII,eAAC,IAAD,CACID,MAAM,OACNC,OAAQ,GACRC,EAAG,GACHC,GAAG,QACHC,WAAW,SACXC,GAAI,CACAC,aAAc,oBACdC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,GAXhB,UAeQd,GACI,cAAC,IAAD,CAAMe,YAAa,GAAnB,SACI,cAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,WAArD,SACI,cAACC,EAAA,EAAD,CAAeC,KAAM,SAKrC,cAAC,IAAD,CAAMf,EAAG,EAAGgB,SAAU,GAAIC,WAAW,OAArC,SAA6CxB,IAC7C,cAAC,IAAD,CAAKyB,GAAG,SACNrB,KAEN,cAAC,IAAD,CACIC,MAAM,OACNC,OAAO,OACPI,GAAI,CACAgB,WAAY,QAJpB,SAQMvB,Q,SCzCGwB,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAGVC,gBAAkB,WAoBd,OACI,cAAC,IAAD,CACIxB,MAAM,OACNyB,cAAc,MACdC,SAAS,OACTC,eAAe,gBAJnB,SApBc,CACd,CACI,KAAQ,iBACR,KAAQ,iBAEZ,CACI,KAAQ,cACR,KAAQ,cAEZ,CACI,KAAQ,cACR,KAAQ,cAEZ,CACI,KAAQ,cACR,KAAQ,eAWGC,KAAI,SAACC,EAAMC,GAAP,OACX,cAAC,IAAD,CAEIC,GAAI,GACJX,GAAI,GACJY,aAAc,GACdhC,MAAO,IALX,SAOI,cAAC,IAAD,CACIa,MAAO,CAAEK,SAAU,SAAUlB,MAAO,OAAQc,eAAgB,OAAQC,MAAQ,SAC5EH,GAAIiB,EAAKI,KAFb,SAII,eAAC,IAAD,CAAKjC,MAAM,OAAX,UACI,cAAC,IAAD,CACIA,MAAM,OACNC,OAAQ,IAFZ,SAGI,cAACiC,EAAA,EAAD,CAAQC,KAAMN,EAAKM,KAAMlB,KAAM,QAEnC,cAAC,IAAD,CACIjB,MAAM,OACN2B,eAAe,SACfzB,EAAG,GAHP,SAKM2B,EAAKM,aArBdN,EAAKM,YAjCX,E,0CAgEnB,WACI,OACI,cAAC,EAAD,CAAgBxC,MAAM,OAAtB,SACI,cAAC,IAAD,CACIK,MAAM,OACNoC,GAAG,MACHC,GAAI,GACJjC,WAAW,SAJf,SAMMkC,KAAKd,0B,GA1EOe,aCYnBC,eAdS,SAACC,EAAQC,GAC7B,MAAO,CACLzD,UAAWwD,EAAME,OAAO1D,UACxBL,cAAe6D,EAAME,OAAO/D,kBAIL,SAAAgE,GACzB,MAAO,CACH5D,aAAc,SAACC,GAAD,OAAe2D,EAASC,EAA2B5D,KACjEN,iBAAkB,SAACC,GAAD,OAAmBgE,EAASC,EAA+BjE,QAItE4D,CAGblB,G,8ECaawB,EA9BO,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACrB,OACI,eAAC,IAAD,CACItB,cAAc,SACdzB,MAAM,OACNC,OAAO,OACP+C,QAAS,GACTC,gBAAgB,UALpB,UAOI,cAAC,IAAD,CAAMC,aAAc,GAApB,SACI,cAACC,EAAA,EAAD,CACIpC,MAAM,UACNG,SAAS,MAFb,qBAOJ,cAAC,IAAD,UACI,cAACiC,EAAA,EAAD,CACIpC,MAAM,UACNqC,WAAW,MACXlC,SAAS,MAHb,SAKK6B,U,QCWNM,EAlCS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMxD,EAAe,EAAfA,SAC7B,OACI,eAAC,IAAD,CACI2B,cAAc,SACdzB,MAAM,OACNC,OAAO,OACP+C,QAAS,GACTrB,eAAe,SACfvB,WAAW,SANf,UASQkD,GACI,cAAC,IAAD,CAAMJ,aAAc,GAApB,SACI,cAAC,IAAD,CACInC,MAAM,UACNuC,KAAMA,EACNrC,KAAM,OAKtB,cAACkC,EAAA,EAAD,CACIjC,SAAU,GACVC,WAAW,OACXoC,UAAU,SACVH,WAAY,IACZrC,MAAM,UALV,SAOMjB,QCTH0D,EAnBW,SAAC,GAA2B,IAAzB7D,EAAwB,EAAxBA,MAAO8D,EAAiB,EAAjBA,WAChC,OACI,eAAC,IAAD,CACIhC,cAAc,MACdE,eAAe,gBACftB,GAAI,CACA2C,QAAS,QAJjB,UAOI,cAAC,IAAD,CAAMvB,cAAc,SAASE,eAAe,SAASvB,WAAW,SAAhE,SACI,cAAC+C,EAAA,EAAD,CAAMjC,SAAS,SAASC,WAAW,OAAnC,SAA2CxB,MAE/C,cAAC,IAAD,CAAM8B,cAAc,SAASE,eAAe,SAASvB,WAAW,SAAhE,SACMqD,QCgLHC,E,kDAvLX,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IAQVoC,aAAe,SAACC,IAEZ1E,EADyB,EAAKqC,MAAtBrC,aACI0E,GACZ,EAAKC,0BAA0BD,IAZhB,EAenBC,0BAA4B,SAACD,GACzB,MAAyE,EAAKrC,MAAtEuC,EAAR,EAAQA,eAAgBxE,EAAxB,EAAwBA,uBAAwBE,EAAhD,EAAgDA,qBAC1CuE,EAAeC,YAAoB,CACrCJ,WACAK,iBAAiB,EACjBC,WAAY,qBAAGC,aAChBvC,KAAI,gBAAGwC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,MAAgC,CACnCC,GADG,EAAeH,UAElBhC,KAAMiC,EAAKzE,MAGX4E,OAAQF,EAAKG,OAAS,EAAIH,EAAKA,EAAKG,OAAS,GAAK,SAGtDlF,EAAuByE,GAEvB,IAAMU,EAAiB,2BAChBX,GADgB,IAEnBY,MAAOX,IAEXvE,EAAqBmF,KAAKC,UAAUH,EAAmB,KAAM,QAnC9C,EAsCnBI,cAAgB,SAACR,GACb,MAAkC,EAAK9C,MAA/BpC,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,YAEZ0E,EAAWkB,YAAiB,CAC9BlB,SAAUzE,EACVkF,OACAH,WAJe,SAAC,GAAD,SAAGC,aAOtBjF,EAAY0E,GACZ,EAAKC,0BAA0BD,IAhDhB,EAmDnBmB,QAAU,YAA8C,EAA3CX,KAA4C,IAAtCY,EAAqC,EAArCA,WAAqC,EAAzBC,SAAyB,EAAfC,SAGrC,OAA2B,IADN,EAAK3D,MAAlBpC,SACQqF,QAA+B,OAAfQ,GAtDjB,EAyDnBG,qBAAuB,SAACC,GACpB,MAAwE,EAAK7D,MAArEnC,EAAR,EAAQA,sBAAuB0E,EAA/B,EAA+BA,eAAgBtE,EAA/C,EAA+CA,qBAEzC6F,EAAUD,EAAEE,OAAOC,MACzBnG,EAAsBiG,GAEtB,IAAMZ,EAAiB,2BAChBX,GADgB,IAEnB3B,KAAMkD,IAEV7F,EAAqBmF,KAAKC,UAAUH,EAAmB,KAAM,QAnE9C,EAsEnBe,6BAA+B,SAAAJ,GAC3B,MAAkC,EAAK7D,MAA/BpC,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,YAElB,EAAKuG,SAAS,CACVC,iBAAkBN,EAAEE,OAAOK,UAC5B,WACC,IAAMC,EAAcC,YAAqB,CACrCjC,SAAUzE,EACV2G,SAAUV,EAAEE,OAAOK,UAGvBzG,EAAY0G,OA9EhB,EAAKnD,MAAQ,CACTiD,kBAAkB,GAEtB,EAAKK,aAAeC,IAAMC,YANX,E,0CAqFnB,WAAU,IAAD,OACL,EAIK3D,KAAKf,MAHNpC,EADJ,EACIA,SACA+G,EAFJ,EAEIA,qBACA7G,EAHJ,EAGIA,mBAGJ,OACI,cAAC,IAAD,CAAKY,OAAO,OAAOD,MAAM,OAAzB,SACI,eAAC,IAAD,CAAMC,OAAO,OAAOC,EAAG,GAAImB,WAAY,EAAGI,cAAc,SAAxD,UACI,cAAC,EAAD,CACI9B,MAAM,YACN8D,WACI,eAAC,IAAD,CACIhC,cAAc,MADlB,UAGI,cAAC,IAAD,CACIA,cAAc,SACdE,eAAe,SACfhB,YAAY,MAHhB,SAKI,cAACwC,EAAA,EAAD,0BAEJ,cAAC,IAAD,CACIxC,YAAY,OACZwF,aAAa,OACb9F,GAAI,CACA+F,YAAa,qBAJrB,SAOI,cAACC,EAAA,EAAD,CACIC,UAAQ,EACRf,MAAOlG,EACPkH,YAAY,uBACZC,SAAUlE,KAAK6C,yBAGvB,cAAC,IAAD,CACI1D,cAAc,SACdE,eAAe,SACfhB,YAAY,MAHhB,SAKI,cAACwC,EAAA,EAAD,2BAEJ,cAAC,IAAD,CACI1B,cAAc,SACdE,eAAe,SAFnB,SAII,cAAC8E,EAAA,EAAD,CACIC,SAAUC,YAAQxH,GAClBwG,QAASrD,KAAKG,MAAMiD,iBACpBc,SAAUlE,KAAKkD,sCAO/BmB,YAAQT,GACJ,eAAC,IAAMU,SAAP,WACI,cAAC,IAAD,CACIC,WAAY,CAAE7D,QAAS,QACvBY,SAAUzE,EACV2H,QAAQ,qBACRN,SAAUlE,KAAKqB,aACfoB,QAASzC,KAAKyC,QACdgC,kBAAmB,cAAG3C,KAAH,IAASC,EAAT,EAASA,KAAT,MAAqB,CACpC2C,QAAS,CACL,cAACC,EAAA,EAAD,CACI3D,KAAM4D,IACNC,OAAO,SACPC,QAAS,kBAAM,EAAKvC,cAAcR,WAM9CsC,YAAQxH,IACJ,cAAC,EAAD,CACImE,KAAM+D,IADV,+CAWZ,cAAC,EAAD,CAAetE,aAAcmD,a,GA/K5BF,IAAMzD,WCoBpBC,eAzBS,SAACC,EAAQC,GAC7B,OAAO,aACLzD,UAAWwD,EAAME,OAAO1D,UACxBL,cAAe6D,EAAME,OAAO/D,cAC5BO,SAAUsD,EAAME,OAAO2E,aAAanI,SACpC+G,qBAAsBzD,EAAME,OAAO2E,aAAaC,aAChDzD,eAAgBrB,EAAME,OAAO2E,aAAaxD,eAC1CzE,mBAAoBoD,EAAME,OAAO2E,aAAaxD,eAAe3B,KAC7D5C,oBAAqBkD,EAAME,OAAO2E,aAAaxD,eAAeY,MAC9DjF,kBAAmBgD,EAAME,OAAO2E,aAAa7H,mBAC1CiD,MAIoB,SAAAE,GACzB,MAAO,CACH5D,aAAc,SAACC,GAAD,OAAe2D,EAASC,EAA2B5D,KACjEN,iBAAkB,SAACC,GAAD,OAAmBgE,EAASC,EAA+BjE,KAC7EM,YAAa,SAACC,GAAD,OAAcyD,EAASC,EAA0B1D,KAC9DC,sBAAuB,SAACC,GAAD,OAAwBuD,EAASC,EAAoCxD,KAC5FC,uBAAwB,SAACC,GAAD,OAAyBqD,EAASC,EAAqCtD,KAC/FC,qBAAsB,SAACC,GAAD,OAAuBmD,EAASC,EAAmCpD,QAIlF+C,CAGbkB,G,yJC5BW8D,GAAuB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACvCC,EAAchB,YAAQc,GAAY,gBAAkBA,EAC1DG,aAAe,CAAEC,KAAMH,EAAUD,SAAUE,EAAaG,WAAY,U,qBC8LzDC,G,kDApLX,WAAYxG,GAAQ,IAAD,8BACf,cAAMA,IAKViF,SAAW,SAACwB,GACR,IAAQxI,EAAyB,EAAK+B,MAA9B/B,qBACRA,GAAwBA,EAAqBwI,GAE7C,EAAKC,uBAAuBD,IAVb,EAanBC,uBAAyB,SAACC,GACtB,MAKI,EAAK3G,MAJLrC,EADJ,EACIA,YACAE,EAFJ,EAEIA,sBACAE,EAHJ,EAGIA,uBACA6I,EAJJ,EAIIA,wBAGJ,GAAIxB,YAAQuB,GACR9I,EAAsB,IACtBE,EAAuB,IACvBJ,EAAY,SAEZ,IACI,IAAMkJ,EAAyBC,KAASC,MAAMJ,GAG9C,KAAIK,YAAIH,EAAwB,SACzBG,YAAIH,EAAwB,UAC5BI,YAASJ,EAAuBjG,OAChCsG,YAAQL,EAAuB1D,QA2BlC,MAAM,IAAIgE,MAAJ,4DA1BF,IAAIC,EAAkB,EAChBC,EAAyBC,YAAoB,CAC/CC,SAAUV,EAAuB1D,MAAM9C,KAAI,SAAAwC,GAIvC,OAHoB,OAAhBA,EAAKG,SACLoE,GAAmB,GAEhB,YAAC,eACDvE,GADP,IAEIzE,MAAOyE,EAAKjC,KACZ2D,UAAU,OAGlBiD,OAAQ,SAAA3E,GAAI,OAAIA,EAAKE,IACrB0E,aAAc,SAAA5E,GAAI,OAAIA,EAAKG,QAC3B0E,QAAS,OAGb,GAAIN,EAAkB,EAClB,MAAM,IAAID,MAAJ,+DAAkEC,EAAlE,uBAGVvJ,EAAsBgJ,EAAuBjG,MAC7C7C,EAAuBsJ,GACvB1J,EAAY0J,GACZT,EAAwB,IAIlC,MAAMe,GACJC,QAAQC,IAAR,kBAAuBF,EAAIG,UAC3BlB,EAAwBe,EAAIG,SAAW,IACvCjK,EAAsB,IACtBE,EAAuB,IACvBJ,EAAY,MAnEL,EAwEnBoK,iBAAmB,SAAClE,GAChB,IAAMmE,EAAa,IAAIC,WACvBD,EAAWE,WAAWrE,EAAEE,OAAOoE,MAAM,GAAI,SACzCH,EAAWI,OAAS,SAAAvE,GAChB,IACI,IAAM8C,EAAU9C,EAAEE,OAAOsE,OACnBlC,EAAWW,KAASC,MAAMJ,GAEhC,KAAIK,YAAIb,EAAU,SAAWa,YAAIb,EAAU,UAAYc,YAASd,EAASvF,OAASsG,YAAQf,EAAShD,QAI/F,MAAM,IAAIgE,MAAJ,4DAHN,EAAKlC,SAASpB,EAAEE,OAAOsE,QACvBC,KAAQC,QAAQ,oCAItB,MAAMZ,GACJW,KAAQE,OAAR,kBAA0Bb,EAAIG,YAGtCE,EAAWS,QAAU,SAAA5E,GACjByE,KAAQE,OAAO,wBACfR,EAAWU,UA5FA,EAgGnBC,iBAAmB,WACf,MAAkD,EAAK3I,MAA/ClC,EAAR,EAAQA,mBAAoBI,EAA5B,EAA4BA,kBACtBiI,EAAW/C,KAAK2D,MAAM7I,GAC5B+H,GAAqB,CAAEC,SAAUpI,EAAoBqI,cAhGrD,EAAK3B,aAAeC,IAAMC,YAHX,E,0CAsGnB,WAAU,IAAD,OACL,EAAqF3D,KAAKf,MAAlF9B,EAAR,EAAQA,kBAAmBJ,EAA3B,EAA2BA,mBAAoBE,EAA/C,EAA+CA,oBAA/C,EAAoE4K,aAEpE,OACI,cAAC,IAAD,CAAKnK,MAAM,OAAOC,OAAO,OAAzB,SACI,eAAC,IAAD,CAAMA,OAAO,OAAOoB,WAAY,EAAGI,cAAc,SAAjD,UACI,cAAC,EAAD,CACI9B,MAAM,iBACN8D,WACI,eAAC,IAAD,CACIhC,cAAc,MADlB,UAGI,cAAC,IAAD,CACId,YAAY,OACZwF,aAAa,OACb9F,GAAI,CACA+F,YAAa,qBAJrB,SAOI,cAAC,KAAD,CAAiBM,SAAUC,YAAQlH,GAAoB2K,KAAM3K,EAAmB4K,OAAQ,kBAAMR,KAAQS,OAAO,wCAA7G,SACI,cAACC,GAAA,EAAD,CAAQC,WAAYC,KAApB,sBAGR,cAACC,GAAA,EAAD,CACInK,SAAUoK,KAASC,aACnBC,QACI,cAACC,GAAA,EAAD,UACI,eAACA,GAAA,EAAKC,MAAN,WACI,cAACD,GAAA,EAAKE,KAAN,CAAW1H,KAAM2H,KAAYC,SAAW,kBAAM,EAAKnF,aAAaoF,QAAQC,SAAxE,SACI,eAAC,IAAD,WACI,uBACIC,IAAK/I,KAAKyD,aACVS,SAAUlE,KAAKgH,iBACfzK,KAAK,OACLgC,MAAO,CAAEyK,QAAS,QAClBC,OAAO,qBANf,mBAWJ,cAACT,GAAA,EAAKU,QAAN,IACA,cAACV,GAAA,EAAKE,KAAN,CACI1H,KAAMmI,KACN/E,SAAUC,YAAQtH,IAAuBsH,YAAQpH,GACjD2L,SAAW,kBAAM,EAAKhB,oBAH1B,8BAlBhB,SA6BI,cAACK,GAAA,EAAD,CAAQmB,UAAWC,KAAnB,yBAKhB,cAAC,IAAD,CACI3L,MAAM,OACNC,OAAO,OACP2L,KAAK,OACLC,MAAM,SACNrF,SAAUlE,KAAKkE,SACfjB,MAAO9F,EACP0C,KAAK,wBACL2J,YAAa,CAAEC,iBAAiB,GAChCC,WAAY,CACRC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,c,GA5KhBnG,IAAMzD,WCcnBC,gBAzBS,SAACC,EAAQC,GAC7B,OAAO,aACLzD,UAAWwD,EAAME,OAAO1D,UACxBL,cAAe6D,EAAME,OAAO/D,cAC5BO,SAAUsD,EAAME,OAAO2E,aAAanI,SACpC2E,eAAgBrB,EAAME,OAAO2E,aAAaxD,eAC1CzE,mBAAoBoD,EAAME,OAAO2E,aAAaxD,eAAe3B,KAC7D5C,oBAAqBkD,EAAME,OAAO2E,aAAaxD,eAAeY,MAC9DjF,kBAAmBgD,EAAME,OAAO2E,aAAa7H,mBAC1CiD,MAIoB,SAAAE,GACzB,MAAO,CACH5D,aAAc,SAACC,GAAD,OAAe2D,EAASC,EAA2B5D,KACjEN,iBAAkB,SAACC,GAAD,OAAmBgE,EAASC,EAA+BjE,KAC7EM,YAAa,SAACC,GAAD,OAAcyD,EAASC,EAA0B1D,KAC9DgJ,wBAAyB,SAACjC,GAAD,OAA0BtD,EXkCH,CACpD/D,KAAMC,EACNC,QAAS,CACLwI,aWrCkGrB,MAClG9G,sBAAuB,SAACC,GAAD,OAAwBuD,EAASC,EAAoCxD,KAC5FC,uBAAwB,SAACC,GAAD,OAAyBqD,EAASC,EAAqCtD,KAC/FC,qBAAsB,SAACC,GAAD,OAAuBmD,EAASC,EAAmCpD,QAIlF+C,CAGbuF,I,wCC0BaqE,GAtDI,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClB,EAA8BrG,IAAMsG,UAAS,GAA7C,oBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCxG,IAAMsG,SAAS,IAArD,oBAAOG,EAAP,KAAoBC,EAApB,KAGMC,EAAgB,WAClBD,EAAe,IACfF,GAAW,IAQf,OACI,eAAC,IAAD,CACI7L,YAAY,OACZwF,aAAa,OACb9F,GAAI,CACA+F,YAAa,qBAJrB,UAOI,cAACwG,GAAA,EAAD,CACIL,QAASA,EACT5M,MAAM,WACNkN,gBAAiBF,EACjBG,WAAW,EAJf,SAMI,eAAC,IAAD,CAAM9M,MAAM,OAAOyB,cAAc,SAASsL,cAAe,GAAzD,UACI,cAACC,GAAA,EAAD,CACI1G,UAAQ,EACR2G,MAAM,YACN1H,MAAOkH,EACPjG,SAAU,SAAApB,GAAC,OAAIsH,EAAetH,EAAEE,OAAOC,UAE3C,eAAC,IAAD,CAAM9D,cAAc,MAAMyL,UAAW,GAAIvL,eAAe,WAAxD,UACI,cAAC4I,GAAA,EAAD,CACI5J,YAAa,GACbwG,OAAO,SACPC,QAASuF,EAHb,oBAOA,cAACpC,GAAA,EAAD,CAAQnD,QAlCN,WAClBiF,EAAUI,GACVE,KAgCgB,yBAKZ,cAACpC,GAAA,EAAD,CAAQC,WAAY2C,KAAU/F,QAAS,kBAAMoF,GAAW,IAAxD,0BC8HGY,G,kDAtKX,WAAY7L,GAAQ,IAAD,8BACf,cAAMA,IAKVoC,aAAe,SAACC,IAMZyJ,EAL8B,EAAK9L,MAA3B8L,mBAEYzJ,EAAShC,KAAI,kBAAgB,CAC7CO,KAD6B,EAAGxC,YATrB,EAenBkF,cAAgB,SAACR,GACb,MAA8C,EAAK9C,MAA3C+L,EAAR,EAAQA,gBAQRD,EARA,EAAwBA,mBAEPvI,YAAiB,CAC9BlB,SAAU0J,EACVjJ,OACAH,WAJe,SAAC,GAAD,SAAGC,eAjBP,EA4BnBkI,UAAY,SAACkB,GACT,MAA8C,EAAKhM,MAA3C+L,EAAR,EAAQA,gBAMRD,EANA,EAAwBA,mBAEPC,EAAeE,OAAO,CACnCrL,KAAMoL,MAhCK,EAsCnBE,kBAAoB,WAChB,IAAQH,EAAmB,EAAK/L,MAAxB+L,eAER,OAAI3G,YAAQ2G,GACD,GAEAA,EAAe1L,KAAI,kBAAe,CACrCjC,MADsB,EAAGwC,UA5ClB,EAkDnBmH,iBAAmB,SAAClE,GAChB,IAAQiI,EAAsB,EAAK9L,MAA3B8L,kBAEF9D,EAAa,IAAIC,WACvBD,EAAWE,WAAWrE,EAAEE,OAAOoE,MAAM,GAAI,SACzCH,EAAWI,OAAS,SAAAvE,GAChB,IACI,IAAMsC,EAAWW,KAASC,MAAMlD,EAAEE,OAAOsE,QACzC,IAAIrB,YAAIb,EAAU,oBAAqBe,YAAQf,EAAS4F,gBAIpD,MAAM,IAAI5E,MAAJ,iDAHN2E,EAAkB3F,EAAS4F,gBAC3BzD,KAAQC,QAAQ,oCAItB,MAAMZ,GACJW,KAAQE,OAAR,kBAA0Bb,EAAIG,YAGtCE,EAAWS,QAAU,SAAA5E,GACjByE,KAAQE,OAAO,wBACfR,EAAWU,UAtEA,EA0EnBC,iBAAmB,WACf,IAAQoD,EAAmB,EAAK/L,MAAxB+L,eAKR9F,GAAqB,CAAEC,SAAU,4BAA6BC,SAJ7C,CACb4F,qBA1EJ,EAAKvH,aAAeC,IAAMC,YAHX,E,0CAmFnB,WAAU,IAAD,OACGqH,EAAmBhL,KAAKf,MAAxB+L,eAER,OACI,cAAC,IAAD,CAAKtN,MAAM,OAAOC,OAAO,OAAzB,SACI,eAAC,IAAD,CAAMA,OAAO,OAAOC,EAAG,GAAImB,WAAY,EAAGI,cAAc,SAAxD,UACI,cAAC,EAAD,CACI9B,MAAM,QACN8D,WACI,eAAC,IAAD,CACIhC,cAAc,MADlB,UAGI,cAAC,GAAD,CAAY4K,UAAW/J,KAAK+J,YAC5B,cAAC3B,GAAA,EAAD,CACInK,SAAUoK,KAASC,aACnBC,QACI,cAACC,GAAA,EAAD,UACI,eAACA,GAAA,EAAKC,MAAN,WACI,cAACD,GAAA,EAAKE,KAAN,CAAW1H,KAAM2H,KAAYC,SAAW,kBAAM,EAAKnF,aAAaoF,QAAQC,SAAxE,SACI,eAAC,IAAD,WACI,uBACIC,IAAK/I,KAAKyD,aACVS,SAAUlE,KAAKgH,iBACfzK,KAAK,OACLgC,MAAO,CAAEyK,QAAS,QAClBC,OAAO,qBANf,mBAWJ,cAACT,GAAA,EAAKU,QAAN,IACA,cAACV,GAAA,EAAKE,KAAN,CACI1H,KAAMmI,KACN/E,SAAUC,YAAQ2G,GAClBpC,SAAW,kBAAM,EAAKhB,oBAH1B,8BAlBhB,SA6BI,cAACK,GAAA,EAAD,CAAQmB,UAAWC,KAAnB,yBAMZhF,YAAQ2G,GACJ,cAAC,EAAD,CACIhK,KAAM+D,IADV,2CAQA,cAAC,IAAD,CACIzD,SAAUtB,KAAKmL,oBACf3G,QAAQ,qBACRD,WAAY,CAAE7D,QAAS,QACvBwD,SAAUlE,KAAKqB,aACf+J,yBAAyB,EACzBC,oBAAqB,SAAAvJ,GAAI,OAAI,GAC7BW,QAAS,SAAAX,GAAI,OAAI,GACjB2C,kBAAmB,cAAG3C,KAAH,IAASC,EAAT,EAASA,KAAT,MAAqB,CACpC2C,QAAS,CACL,cAACC,EAAA,EAAD,CACI3D,KAAM4D,IACNC,OAAO,SACPC,QAAS,kBAAM,EAAKvC,cAAcR,oB,GA1JlD2B,IAAMzD,WCSnBC,gBAjBS,SAACC,EAAQC,GAC7B,OAAO,aACLzD,UAAWwD,EAAME,OAAO1D,UACxBL,cAAe6D,EAAME,OAAO/D,cAC5B0O,eAAgB7K,EAAME,OAAO2E,aAAagG,gBACvC5K,MAIoB,SAAAE,GACzB,MAAO,CACH5D,aAAc,SAACC,GAAD,OAAe2D,EAASC,EAA2B5D,KACjEN,iBAAkB,SAACC,GAAD,OAAmBgE,EAASC,EAA+BjE,KAC7EyO,kBAAmB,SAACC,GAAD,OAAoB1K,EdyBd,SAAA0K,GAAc,MAAK,CAChDzO,KAAMC,EACNC,QAAS,CACLuO,mBc5BgDzK,CAAgCyK,QAIzE9K,CAGb4K,ICjBmBQ,G,kDACjB,WAAYrM,GAAQ,uCACVA,G,0CAGV,WACI,OACI,cAAC,EAAD,CACI5B,MAAM,sBACNC,gBAAc,EAFlB,SAII,eAAC,IAAD,CACII,MAAM,OACNC,OAAO,OACPoB,WAAY,GACZhB,GAAI,CACAE,SAAU,QACVC,IAAK,EACLC,KAAM,GAPd,UAUI,cAAC,IAAD,CACIT,MAAO,EAAE,EACTK,GAAI,CACA+F,YAAa,qBAHrB,SAMI,cAACyH,GAAD,MAEJ,cAAC,IAAD,CACI7N,MAAO,GACPK,GAAI,CACA+F,YAAa,qBAHrB,SAMI,cAAC0H,EAAD,MAEJ,cAAC,IAAD,CACI9N,MAAO,EAAE,EADb,SAGI,cAAC+N,GAAD,e,GAxCkBxL,aCa3BC,gBAhBS,SAACC,EAAQC,GAC7B,MAAO,CACLzD,UAAWwD,EAAME,OAAO1D,UACxBL,cAAe6D,EAAME,OAAO/D,cAC5BS,mBAAoBoD,EAAME,OAAO2E,aAAaxD,eAAe3B,KAC7D1C,kBAAmBgD,EAAME,OAAO2E,aAAa7H,sBAItB,SAAAmD,GACzB,MAAO,CACH5D,aAAc,SAACC,GAAD,OAAe2D,EAASC,EAA2B5D,KACjEN,iBAAkB,SAACC,GAAD,OAAmBgE,EAASC,EAA+BjE,QAItE4D,CAGboL,I,UCkBaI,GApCS,WACpB,OACI,cAAC,IAAD,CACIhO,MAAM,OACNC,OAAO,OACPI,GAAI,CACAE,SAAU,QACVC,IAAK,EACLC,KAAM,GANd,SASI,cAAC,IAAD,CACIT,MAAM,OACNC,OAAO,OACP0B,eAAe,SACfvB,WAAW,SAJf,SAMI,eAAC,IAAD,CACIqB,cAAc,SACdE,eAAe,SACfvB,WAAW,SAHf,UAKI,cAAC,IAAD,CAAMc,SAAS,MAAf,mCACA,cAAC,IAAD,CAAMA,SAAS,OAAf,iBACA,cAAC,IAAD,CAAMA,SAAS,QAAf,sCACA,cAAC,IAAD,CAAMN,GAAG,IAAIC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,QAASiC,QAAS,QAAvE,SACI,cAACuH,GAAA,EAAD,CAAQC,WAAYyD,KAAUhN,KAAK,QAAQN,YAAa,GAAxD,+BCTTuN,OAdf,WACE,OACE,cAAC,IAAD,CAAQC,SAAUC,YAAlB,SACE,cAAC,IAAD,CAAKpO,MAAM,OAAOC,OAAO,OAAzB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoO,OAAK,EAAChK,KAAK,IAAIiK,UAAWhN,IACjC,cAAC,IAAD,CAAO+C,KAAK,gBAAgBiK,UAAWV,KACvC,cAAC,IAAD,CAAOU,UAAWN,aCHbO,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,2DCLRQ,GAAe,CACjB/P,WAAW,EACXL,cAAe,GACf0I,aAAc,CACVgG,eAAgB,GAChB7N,kBAAmB,GACnBN,SAAU,GACV2E,eAAgB,CACZ3B,KAAM,GACNuC,MAAO,IAEX6C,aAAc,KCRhB0H,GAAsB,CACxBC,IAAK,SACLC,QAASA,KACTC,UAAW,IAGAC,gBAAgB,CAC3B1M,OAAQ2M,aAAeL,IDKZ,WAAwC,IAA/BxM,EAA8B,uDAAtBuM,GAAcO,EAAQ,uCAClD,OAAQA,EAAO1Q,MACX,KAAKC,EACD,OAAO,eACAkQ,IAGX,KAAKlQ,EACD,IAAQF,EAAkB2Q,EAAOxQ,QAAzBH,cAER,OAAO,2BACA6D,GADP,IAEI7D,kBAGR,KAAKE,EACD,IAAQG,EAAcsQ,EAAOxQ,QAArBE,UAER,OAAO,2BACAwD,GADP,IAEIxD,cAGR,KAAKH,EACD,IAAQK,EAAaoQ,EAAOxQ,QAApBI,SACR,OAAO,2BACAsD,GADP,IAEI6E,aAAa,2BACN7E,EAAM6E,cADD,IAERnI,eAIZ,KAAKL,EACD,IAAQO,EAAuBkQ,EAAOxQ,QAA9BM,mBACR,OAAO,2BACAoD,GADP,IAEI6E,aAAa,2BACN7E,EAAM6E,cADD,IAERxD,eAAe,2BACRrB,EAAM6E,aAAaxD,gBADZ,IAEV3B,KAAM9C,QAKtB,KAAKP,EACD,IAAQS,EAAwBgQ,EAAOxQ,QAA/BQ,oBACR,OAAO,2BACAkD,GADP,IAEI6E,aAAa,2BACN7E,EAAM6E,cADD,IAERxD,eAAe,2BACRrB,EAAM6E,aAAaxD,gBADZ,IAEVY,MAAOnF,QAKvB,KAAKT,EACD,IAAQwO,EAAmBiC,EAAOxQ,QAA1BuO,eAER,OAAO,2BACA7K,GADP,IAEI6E,aAAa,2BACN7E,EAAM6E,cADD,IAERgG,qBAIZ,KAAKxO,EACD,IAAQW,EAAsB8P,EAAOxQ,QAA7BU,kBAER,OAAO,2BACAgD,GADP,IAEI6E,aAAa,2BACN7E,EAAM6E,cADD,IAER7H,wBAIZ,KAAKX,EACD,IAAQyI,EAAiBgI,EAAOxQ,QAAxBwI,aAER,OAAO,2BACA9E,GADP,IAEI6E,aAAa,2BACN7E,EAAM6E,cADD,IAERC,mBAIZ,QACI,OAAO9E,QExGb+M,GAAgB,CAClBN,IAAK,OACLC,aACAM,UAAW,CAAC,UACZC,gBAAiBC,MAGfC,GAAmBN,aAAeE,GAAeK,IAG1CC,GAAQC,aACjBH,GACAI,OAAOC,8BAAgCD,OAAOC,gCAGrCC,GAAYC,aAAaL,I,UCVtCM,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACE,cAAC,KAAD,CAAaQ,QAAS,KAAMJ,UAAWA,GAAvC,SACI,cAAC,GAAD,QAGNK,SAASC,eAAe,SAM1BjC,M","file":"static/js/main.b8554189.chunk.js","sourcesContent":["export const SET_IS_LOADING = \"SET_IS_LOADING\";\nexport const RESET_STATE = \"RESET_STATE\";\nexport const SET_STATUS_MESSAGE = \"SET_STATUS_MESSAGE\";\nexport const SET_FLOW_TREE = \"SET_FLOW_TREE\";\nexport const SET_FLOW_TREE_EXPORT_NAME = \"SET_FLOW_TREE_EXPORT_NAME\";\nexport const SET_FLOW_TREE_EXPORT_NODES = \"SET_FLOW_TREE_EXPORT_NODES\";\nexport const SET_AVAILABLE_NODES = \"SET_AVAILABLE_NODES\";\nexport const SET_JSON_EDITOR_CONTENT = \"SET_JSON_EDITOR_CONTENT\";\nexport const SET_FLOW_TREE_PARSING_ERROR = \"SET_FLOW_TREE_PARSING_ERROR\";","import * as ACTIONS from '../constants/actions';\n\n\nexport const resetState = () => ({\n    type: ACTIONS.RESET_STATE\n});\n\nexport const setStatusMessage = statusMessage => ({\n    type: ACTIONS.SET_STATUS_MESSAGE,\n    payload: {\n        statusMessage\n    }\n});\n\nexport const setIsLoading = isLoading => ({\n    type: ACTIONS.SET_IS_LOADING,\n    payload: {\n        isLoading\n    }\n});\n\nexport const setFlowTree = flowTree => ({\n    type: ACTIONS.SET_FLOW_TREE,\n    payload: {\n        flowTree\n    }\n});\n\nexport const setFlowTreeExportName = flowTreeExportName => ({\n    type: ACTIONS.SET_FLOW_TREE_EXPORT_NAME,\n    payload: {\n        flowTreeExportName\n    }\n});\n\nexport const setFlowTreeExportNodes = flowTreeExportNodes => ({\n    type: ACTIONS.SET_FLOW_TREE_EXPORT_NODES,\n    payload: {\n        flowTreeExportNodes\n    }\n});\n\nexport const setAvailableNodes = availableNodes => ({\n    type: ACTIONS.SET_AVAILABLE_NODES,\n    payload: {\n        availableNodes\n    }\n});\n\nexport const setJsonEditorContent = jsonEditorContent => ({\n    type: ACTIONS.SET_JSON_EDITOR_CONTENT,\n    payload: {\n        jsonEditorContent\n    }\n});\n\nexport const setFlowTreeParsingError = parsingError => ({\n    type: ACTIONS.SET_FLOW_TREE_PARSING_ERROR,\n    payload: {\n        parsingError\n    }\n});","import { ArrowLeftIcon } from 'evergreen-ui';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Flex, Text, Box } from 'rebass';\nimport styles from '../styles.module.css';\n\nconst BaseContentCmp = ({ title, description, withLinkToHome, children, navChildren, ...props}) => {\n    return (\n        <Box\n            width=\"100%\"\n            height=\"100%\"\n        >\n            <Flex\n                width=\"100%\"\n                height={60}\n                p={15}\n                bg='white'\n                alignItems='center'\n                sx={{\n                    borderBottom: \"1px solid #d8d8d8\",\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    zIndex: 1,\n                }}\n            >\n                {\n                    withLinkToHome && (\n                        <Flex marginRight={15}>\n                            <Link to=\"/\" style={{ textDecoration: \"none\", color: \"#6D6D6D\"}}>\n                                <ArrowLeftIcon size={32} />\n                            </Link>\n                        </Flex>\n                    )\n                }\n                <Text p={2} fontSize={28} fontWeight='bold'>{title}</Text>\n                <Box mx='auto' />\n                { navChildren }\n            </Flex>\n            <Flex\n                width=\"100%\"\n                height=\"100%\"\n                sx={{\n                    paddingTop: \"60px\"\n                }}\n            >\n\n                { children }\n            </Flex>\n        </Box>\n    );\n}\n\nexport default BaseContentCmp;","import React, { Component } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Flex, Heading, Link, Box } from 'rebass';\nimport BaseContentCmp from '../../components/BaseContentCmp';\nimport { Avatar } from 'evergreen-ui';\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderToolIcons = () => {\n        const toolLists = [\n            {\n                \"name\": \"Flow Tree Tool\",\n                \"link\": \"/flowtreetool\",\n            },\n            {\n                \"name\": \"Test Tool 1\",\n                \"link\": \"/testtool1\",\n            },\n            {\n                \"name\": \"Test Tool 2\",\n                \"link\": \"/testtool2\",\n            },\n            {\n                \"name\": \"Test Tool 3\",\n                \"link\": \"/testtool3\",\n            }\n        ];\n\n        return (\n            <Flex\n                width=\"100%\"\n                flexDirection=\"row\"\n                flexWrap=\"wrap\"\n                justifyContent=\"space-between\"\n            >\n                {toolLists.map((tool, idx) => (\n                    <Flex\n                        key={tool.name}\n                        my={15}\n                        mx={15}\n                        borderRadius={32}\n                        width={150}\n                    >\n                        <RouterLink \n                            style={{ fontSize: \"0.9rem\", width: \"100%\", textDecoration: \"none\", color:  \"black\"}}\n                            to={tool.link}\n                        >\n                            <Box width=\"100%\">\n                                <Box \n                                    width=\"100%\" \n                                    height={150}>\n                                    <Avatar name={tool.name} size={150} />\n                                </Box>\n                                <Flex\n                                    width=\"100%\"\n                                    justifyContent=\"center\"\n                                    p={15}\n                                >\n                                    { tool.name } \n                                </Flex>\n                            </Box>\n                        </RouterLink>\n                    </Flex>\n                ))}\n            </Flex>\n        );\n    }\n    \n    render() {\n        return (\n            <BaseContentCmp title=\"Home\">\n                <Flex\n                    width=\"100%\"\n                    px=\"25%\"\n                    py={30}\n                    alignItems='center'\n                >\n                    { this.renderToolIcons() }\n                </Flex>\n            </BaseContentCmp>\n        )\n    }\n}","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../../actions/globalActions';\nimport Home from './Home';\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Home);","import { Text } from 'evergreen-ui';\nimport React from 'react';\nimport { Flex } from 'rebass';\n\nconst ErrorPanelCmp = ({ errorMessage }) => {\n    return (\n        <Flex \n            flexDirection=\"column\"\n            width=\"100%\" \n            height=\"100%\" \n            padding={30}\n            backgroundColor=\"#FFCCCC\"\n        >\n            <Flex marginBottom={50}>\n                <Text \n                    color=\"#cc0000\"\n                    fontSize=\"2em\"\n                >\n                    ERROR\n                </Text>\n            </Flex>\n            <Flex>\n                <Text\n                    color=\"#cc0000\"\n                    lineHeight=\"1em\"\n                    fontSize=\"1em\"\n                >\n                    {errorMessage}\n                </Text>\n            </Flex>\n        </Flex>\n    )\n}\n\nexport default ErrorPanelCmp;","import { Icon, Text } from 'evergreen-ui';\nimport React from 'react';\nimport { Flex } from 'rebass';\n\nconst InstructionsCmp = ({ icon, children }) => {\n    return (\n        <Flex \n            flexDirection=\"column\"\n            width=\"100%\" \n            height=\"100%\" \n            padding={30}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n        >\n            {\n                icon && (\n                    <Flex marginBottom={20}>\n                        <Icon \n                            color=\"#c5c5c5\" \n                            icon={icon} \n                            size={50}\n                        />\n                    </Flex>\n                )\n            }\n            <Text \n                fontSize={24} \n                fontWeight=\"bold\" \n                textAlign=\"center\" \n                lineHeight={1.5}\n                color=\"#c5c5c5\"\n            >\n                { children }\n            </Text>\n        </Flex>\n    )\n}\n\nexport default InstructionsCmp;","import { Icon, MoreIcon, Popover, Position, Text } from \"evergreen-ui\";\nimport { Flex, Heading } from \"rebass\";\n\n\nconst SubPanelHeaderCmp = ({ title, actionsCmp }) => {\n    return (\n        <Flex\n            flexDirection=\"row\"\n            justifyContent=\"space-between\"\n            sx={{\n                padding: \"15px\"\n            }}\n        >\n            <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n                <Text fontSize=\"1.5rem\" fontWeight=\"bold\">{title}</Text>\n            </Flex>\n            <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n                { actionsCmp }\n            </Flex>\n        </Flex>\n    );\n}\n\nexport default SubPanelHeaderCmp;","import { AddIcon, CrossIcon, IconButton, Switch, Text, TextInput } from 'evergreen-ui';\nimport React from 'react';\nimport SortableTree, { getFlatDataFromTree, removeNodeAtPath, toggleExpandedForAll } from 'react-sortable-tree';\nimport { Box, Flex } from 'rebass';\nimport { isEmpty } from 'underscore';\nimport ErrorPanelCmp from './ErrorPanelCmp';\nimport InstructionsCmp from './InstructionsCmp';\nimport SubPanelHeaderCmp from './SubPanelHeaderCmp';\n\nclass FlowTreeEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            allNodesExpanded: true,\n        }\n        this.fileInputRef = React.createRef();\n    }\n\n    onTreeChange = (treeData) => {\n        const { setFlowTree, } = this.props;\n        setFlowTree(treeData);\n        this.updateFlowTreeExportNodes(treeData);\n    }\n\n    updateFlowTreeExportNodes = (treeData) => {\n        const { flowTreeExport, setFlowTreeExportNodes, setJsonEditorContent } = this.props;\n        const flatTreeData = getFlatDataFromTree({\n            treeData,\n            ignoreCollapsed: false,\n            getNodeKey: ({ treeIndex }) => treeIndex\n        }).map(({ node, path, treeIndex }) => ({\n            id: treeIndex,\n            name: node.title,\n            // The last entry in the path is this node's key\n            // The second to last entry (accessed here) is the parent node's key\n            parent: path.length > 1 ? path[path.length - 2] : null,\n        }));\n\n        setFlowTreeExportNodes(flatTreeData);\n\n        const newTreeExportData = {\n            ...flowTreeExport,\n            nodes: flatTreeData,\n        }\n        setJsonEditorContent(JSON.stringify(newTreeExportData, null, '\\t'));\n    }\n\n    onDeleteClick = (path) => {\n        const { flowTree, setFlowTree } = this.props;\n        const getNodeKey = ({ treeIndex }) => treeIndex;\n        const treeData = removeNodeAtPath({\n            treeData: flowTree,\n            path,\n            getNodeKey,\n        });\n\n        setFlowTree(treeData);\n        this.updateFlowTreeExportNodes(treeData);\n    }\n\n    canDrop = ({ node, nextParent, prevPath, nextPath }) => {\n        // prevents having multiple root nodes\n        const { flowTree } = this.props;\n        return flowTree.length === 0 || nextParent !== null;\n    };\n\n    onFlowTreeNameChange = (e) => {\n        const { setFlowTreeExportName, flowTreeExport, setJsonEditorContent } = this.props;\n\n        const newName = e.target.value;\n        setFlowTreeExportName(newName);\n\n        const newTreeExportData = {\n            ...flowTreeExport,\n            name: newName,\n        }\n        setJsonEditorContent(JSON.stringify(newTreeExportData, null, '\\t'));\n    }\n\n    onExpandAllNodesSwitchChange = e => {\n        const { flowTree, setFlowTree } = this.props;\n\n        this.setState({\n            allNodesExpanded: e.target.checked,\n        }, () => {\n            const newTreeData = toggleExpandedForAll({\n                treeData: flowTree,\n                expanded: e.target.checked,\n            })\n\n            setFlowTree(newTreeData);\n        });\n    }\n\n    render() {\n        const { \n            flowTree, \n            flowTreeParsingError,\n            flowTreeExportName,\n         } = this.props;\n        \n        return (\n            <Box height=\"100%\" width=\"100%\">\n                <Flex height=\"100%\" p={15} paddingTop={0} flexDirection=\"column\">\n                    <SubPanelHeaderCmp \n                        title=\"Flow Tree\"\n                        actionsCmp={\n                            <Flex\n                                flexDirection=\"row\"\n                            >\n                                <Flex\n                                    flexDirection=\"column\"\n                                    justifyContent=\"center\"\n                                    marginRight=\"5px\"\n                                >\n                                    <Text>Tree Name</Text>\n                                </Flex>\n                                <Flex \n                                    marginRight=\"15px\"\n                                    paddingRight=\"15px\"\n                                    sx={{\n                                        borderRight: \"1px solid #c8c8c8\"\n                                    }}\n                                >\n                                    <TextInput\n                                        required\n                                        value={flowTreeExportName}\n                                        placeholder=\"Enter flow tree name\"\n                                        onChange={this.onFlowTreeNameChange}\n                                    />\n                                </Flex>\n                                <Flex\n                                    flexDirection=\"column\"\n                                    justifyContent=\"center\"\n                                    marginRight=\"5px\"\n                                >\n                                    <Text>Expand All</Text>\n                                </Flex>\n                                <Flex\n                                    flexDirection=\"column\"\n                                    justifyContent=\"center\"\n                                >\n                                    <Switch \n                                        disabled={isEmpty(flowTree)}\n                                        checked={this.state.allNodesExpanded} \n                                        onChange={this.onExpandAllNodesSwitchChange} \n                                    />\n                                </Flex>\n                            </Flex>\n                        }\n                    />\n                    {\n                        isEmpty(flowTreeParsingError) ? ( \n                            <React.Fragment>\n                                <SortableTree\n                                    innerStyle={{ padding: \"10px\"}}\n                                    treeData={flowTree}\n                                    dndType=\"FLOW_TREE_DND_TYPE\"\n                                    onChange={this.onTreeChange}\n                                    canDrop={this.canDrop}\n                                    generateNodeProps={({ node, path }) => ({\n                                        buttons: [\n                                            <IconButton \n                                                icon={CrossIcon} \n                                                intent=\"danger\" \n                                                onClick={() => this.onDeleteClick(path)}\n                                            />\n                                        ],\n                                    })}\n                                />\n                                { \n                                    isEmpty(flowTree) && (\n                                        <InstructionsCmp\n                                            icon={AddIcon}\n                                        >\n                                            Drag Nodes or Import JSON File\n                                        </InstructionsCmp>\n                                    )\n                                }\n                            </React.Fragment>\n                        )\n                        :\n                        (\n                            <ErrorPanelCmp errorMessage={flowTreeParsingError} />\n                        )\n                    }\n                </Flex>\n            </Box>\n        );\n    }\n}\n\nexport default FlowTreeEditor;","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../actions/globalActions';\nimport FlowTreeEditor from \"../components/FlowTreeEditorCmp\";\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n      flowTree: state.global.flowTreeTool.flowTree,\n      flowTreeParsingError: state.global.flowTreeTool.parsingError,\n      flowTreeExport: state.global.flowTreeTool.flowTreeExport,\n      flowTreeExportName: state.global.flowTreeTool.flowTreeExport.name,\n      flowTreeExportNodes: state.global.flowTreeTool.flowTreeExport.nodes,\n      jsonEditorContent: state.global.flowTreeTool.jsonEditorContent,\n      ...ownProps,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n        setFlowTree: (flowTree) => dispatch(GlobalActions.setFlowTree(flowTree)),\n        setFlowTreeExportName: (flowTreeExportName) => dispatch(GlobalActions.setFlowTreeExportName(flowTreeExportName)),\n        setFlowTreeExportNodes: (flowTreeExportNodes) => dispatch(GlobalActions.setFlowTreeExportNodes(flowTreeExportNodes)),\n        setJsonEditorContent: (jsonEditorContent) => dispatch(GlobalActions.setJsonEditorContent(jsonEditorContent)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(FlowTreeEditor);","import exportFromJSON from 'export-from-json';\nimport { isEmpty } from 'underscore';\n\n\nexport const exportDataToJsonFile = ({ fileName, jsonData }) => {\n    const newFileName = isEmpty(fileName) ? \"new-flow-tree\" : fileName;\n    exportFromJSON({ data: jsonData, fileName: newFileName, exportType: \"json\" });\n}","import React from 'react';\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport styles from '../styles.module.css';\nimport { has, isArray, isEmpty, isString } from 'underscore';\nimport { getTreeFromFlatData } from 'react-sortable-tree';\nimport jsonlint from 'jsonlint-mod';\nimport { Box, Flex } from 'rebass';\nimport SubPanelHeaderCmp from './SubPanelHeaderCmp';\nimport { Button, CaretDownIcon, ClipboardIcon, DownloadIcon, ImportIcon, Menu, Popover, Position, toaster } from 'evergreen-ui';\nimport { exportDataToJsonFile } from '../utils';\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nclass JsonEditorCmp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.fileInputRef = React.createRef();\n    }\n\n    onChange = (newValue) => {\n        const { setJsonEditorContent } = this.props;\n        setJsonEditorContent && setJsonEditorContent(newValue);\n\n        this.updateTreeDataFromJson(newValue);\n    }\n\n    updateTreeDataFromJson = (jsonStr) => {\n        const { \n            setFlowTree, \n            setFlowTreeExportName, \n            setFlowTreeExportNodes, \n            setFlowTreeParsingError,\n        } = this.props;\n\n        if (isEmpty(jsonStr)) {\n            setFlowTreeExportName(\"\");\n            setFlowTreeExportNodes([]);\n            setFlowTree([]);\n        } else {\n            try {\n                const flowTreeExportFromJSON = jsonlint.parse(jsonStr);\n\n\n                if (has(flowTreeExportFromJSON, \"name\") \n                    && has(flowTreeExportFromJSON, \"nodes\") \n                    && isString(flowTreeExportFromJSON.name) \n                    && isArray(flowTreeExportFromJSON.nodes)) {\n                        let nullParentCount = 0;\n                        const flatDataFromJsonEditor = getTreeFromFlatData({\n                            flatData: flowTreeExportFromJSON.nodes.map(node => {\n                                if (node.parent === null) {\n                                    nullParentCount += 1;\n                                }\n                                return ({ \n                                    ...node, \n                                    title: node.name,\n                                    expanded: true,\n                                });\n                            }),\n                            getKey: node => node.id, // resolve a node's key\n                            getParentKey: node => node.parent, // resolve a node's parent's key\n                            rootKey: null, // The value of the parent key when there is no parent (i.e., at root level)\n                        });\n        \n                        if (nullParentCount > 1) {\n                            throw new Error(`Flow tree can only contain a single root node. Found ${nullParentCount} with null parent.`);\n                        }\n        \n                        setFlowTreeExportName(flowTreeExportFromJSON.name);\n                        setFlowTreeExportNodes(flatDataFromJsonEditor);\n                        setFlowTree(flatDataFromJsonEditor);\n                        setFlowTreeParsingError(\"\");\n                } else {\n                    throw new Error(`JSON format must be { \"name\": \"tree-name\", \"nodes\": [] }`)\n                }\n            } catch(err) {\n                console.log(`ERROR - ${err.message}`);\n                setFlowTreeParsingError(err.message || \"\");\n                setFlowTreeExportName(\"\");\n                setFlowTreeExportNodes([]);\n                setFlowTree([]);\n            }\n        }\n    }\n\n    handleFileUpload = (e) => {\n        const fileReader = new FileReader();\n        fileReader.readAsText(e.target.files[0], \"UTF-8\");\n        fileReader.onload = e => {\n            try {\n                const jsonStr = e.target.result;\n                const jsonData = jsonlint.parse(jsonStr);\n\n                if (has(jsonData, \"name\") && has(jsonData, \"nodes\") && isString(jsonData.name) && isArray(jsonData.nodes)) {\n                    this.onChange(e.target.result);\n                    toaster.success(\"File has been read successfully!\");\n                } else {\n                    throw new Error(`JSON format must be { \"name\": \"tree-name\", \"nodes\": [] }`)\n                }\n            } catch(err) {\n                toaster.danger(`Error - ${err.message}`);\n            }\n        }\n        fileReader.onerror = e => {\n            toaster.danger(\"Failed to read file!\");\n            fileReader.abort();\n        }\n    }\n\n    onExportBtnClick = () => {\n        const { flowTreeExportName, jsonEditorContent } = this.props;\n        const jsonData = JSON.parse(jsonEditorContent);\n        exportDataToJsonFile({ fileName: flowTreeExportName, jsonData });\n    }\n\n    render() {\n        const { jsonEditorContent, flowTreeExportName, flowTreeExportNodes, onExportJSON } = this.props;\n        \n        return (\n            <Box width=\"100%\" height=\"100%\">\n                <Flex height=\"100%\" paddingTop={0} flexDirection=\"column\">\n                    <SubPanelHeaderCmp \n                        title=\"Flow Tree JSON\"\n                        actionsCmp={\n                            <Flex\n                                flexDirection=\"row\"\n                            >\n                                <Flex \n                                    marginRight=\"15px\"\n                                    paddingRight=\"15px\"\n                                    sx={{\n                                        borderRight: \"1px solid #c8c8c8\"\n                                    }}\n                                >\n                                    <CopyToClipboard disabled={isEmpty(jsonEditorContent)} text={jsonEditorContent} onCopy={() => toaster.notify(\"Flow tree JSON copied to clipboard!\")}>\n                                        <Button iconBefore={ClipboardIcon}>Copy</Button>\n                                    </CopyToClipboard>\n                                </Flex>\n                                <Popover\n                                    position={Position.BOTTOM_RIGHT}\n                                    content={\n                                        <Menu>\n                                            <Menu.Group>\n                                                <Menu.Item icon={ImportIcon} onSelect={ () => this.fileInputRef.current.click() }>\n                                                    <Flex>\n                                                        <input\n                                                            ref={this.fileInputRef}\n                                                            onChange={this.handleFileUpload}\n                                                            type=\"file\"\n                                                            style={{ display: \"none\" }}\n                                                            accept=\"application/JSON\"\n                                                        />\n                                                        Import JSON\n                                                    </Flex>\n                                                </Menu.Item>\n                                                <Menu.Divider />\n                                                <Menu.Item \n                                                    icon={DownloadIcon}\n                                                    disabled={isEmpty(flowTreeExportName) || isEmpty(flowTreeExportNodes)} \n                                                    onSelect={ () => this.onExportBtnClick() }\n                                                >\n                                                    Export JSON\n                                                </Menu.Item>\n                                            </Menu.Group>\n                                        </Menu>\n                                    }\n                                >\n                                    <Button iconAfter={CaretDownIcon}>File</Button>\n                                </Popover>\n                            </Flex>\n                        }\n                    />\n                    <AceEditor\n                        width=\"100%\"\n                        height=\"100%\"\n                        mode=\"json\"\n                        theme=\"github\"\n                        onChange={this.onChange}\n                        value={jsonEditorContent}\n                        name=\"flow-tree-json-editor\"\n                        editorProps={{ $blockScrolling: true }}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: true\n                        }}\n                    />\n                </Flex>\n            </Box>\n        );\n    }\n}\n\nexport default JsonEditorCmp;","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../actions/globalActions';\nimport JsonEditorCmp from \"../components/JsonEditorCmp\";\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n      flowTree: state.global.flowTreeTool.flowTree,\n      flowTreeExport: state.global.flowTreeTool.flowTreeExport,\n      flowTreeExportName: state.global.flowTreeTool.flowTreeExport.name,\n      flowTreeExportNodes: state.global.flowTreeTool.flowTreeExport.nodes,\n      jsonEditorContent: state.global.flowTreeTool.jsonEditorContent,\n      ...ownProps,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n        setFlowTree: (flowTree) => dispatch(GlobalActions.setFlowTree(flowTree)),\n        setFlowTreeParsingError: (flowTreeParsingError) => dispatch(GlobalActions.setFlowTreeParsingError(flowTreeParsingError)),\n        setFlowTreeExportName: (flowTreeExportName) => dispatch(GlobalActions.setFlowTreeExportName(flowTreeExportName)),\n        setFlowTreeExportNodes: (flowTreeExportNodes) => dispatch(GlobalActions.setFlowTreeExportNodes(flowTreeExportNodes)),\n        setJsonEditorContent: (jsonEditorContent) => dispatch(GlobalActions.setJsonEditorContent(jsonEditorContent)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(JsonEditorCmp);","import { Button, Dialog, FormField, Pane, PlusIcon, TextInputField, toaster } from 'evergreen-ui';\nimport React from 'react';\nimport { Box, Flex, Text } from 'rebass';\n\nconst AddNodeCmp = ({ onAddNode }) => {\n    const [isShown, setIsShown] = React.useState(false);\n    const [nodeNameVal, setNodeNameVal] = React.useState('');\n\n\n    const onDialogClose = () => {\n        setNodeNameVal(\"\");\n        setIsShown(false)\n    }\n\n    const onAddBtnClick = () => {\n        onAddNode(nodeNameVal);\n        onDialogClose();\n    };\n\n    return (\n        <Box \n            marginRight=\"15px\"\n            paddingRight=\"15px\"\n            sx={{\n                borderRight: \"1px solid #c8c8c8\"\n            }}\n        >\n            <Dialog\n                isShown={isShown}\n                title=\"Add Node\"\n                onCloseComplete={onDialogClose}\n                hasFooter={false}\n            >\n                <Flex width=\"100%\" flexDirection=\"column\" paddingBottom={15}>\n                    <TextInputField\n                        required\n                        label=\"Node name\"\n                        value={nodeNameVal}\n                        onChange={e => setNodeNameVal(e.target.value)}\n                    />\n                    <Flex flexDirection=\"row\" marginTop={15} justifyContent=\"flex-end\">\n                        <Button \n                            marginRight={15} \n                            intent=\"danger\"\n                            onClick={onDialogClose}\n                        >\n                            Cancel\n                        </Button>\n                        <Button onClick={onAddBtnClick}>Add</Button>\n                    </Flex>\n                </Flex>\n            </Dialog>\n\n            <Button iconBefore={PlusIcon} onClick={() => setIsShown(true)}>Add Node</Button>\n        </Box>\n    )\n}\n\nexport default AddNodeCmp;","import { AddIcon, Button, CaretDownIcon, CrossIcon, DownloadIcon, IconButton, ImportIcon, Menu, Popover, Position, Text, toaster } from 'evergreen-ui';\nimport React from 'react';\nimport SortableTree, { removeNodeAtPath } from 'react-sortable-tree';\nimport { Box, Flex, Heading } from 'rebass';\nimport { has, isArray, isEmpty } from 'underscore';\nimport styles from '../styles.module.css';\nimport AddNodeCmp from './AddNodeCmp';\nimport SubPanelHeaderCmp from './SubPanelHeaderCmp';\nimport jsonlint from 'jsonlint-mod';\nimport { exportDataToJsonFile } from '../utils';\nimport InstructionsCmp from './InstructionsCmp';\n\nclass NodesPanelCmp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.fileInputRef = React.createRef();\n    }\n\n    onTreeChange = (treeData) => {\n        const { setAvailableNodes } = this.props;\n\n        const newTreeData = treeData.map(({ title }) => ({\n            name: title,\n        }));\n        setAvailableNodes(newTreeData);\n    }\n\n    onDeleteClick = (path) => {\n        const { availableNodes, setAvailableNodes } = this.props;\n        const getNodeKey = ({ treeIndex }) => treeIndex;\n        const treeData = removeNodeAtPath({\n            treeData: availableNodes,\n            path,\n            getNodeKey,\n        });\n\n        setAvailableNodes(treeData);\n    }\n\n\n    onAddNode = (nodeName) => {\n        const { availableNodes, setAvailableNodes } = this.props;\n\n        const treeData = availableNodes.concat({\n            name: nodeName\n        });\n\n        setAvailableNodes(treeData);\n    }\n\n    getAvailableNodes = () => {\n        const { availableNodes } = this.props;\n        \n        if (isEmpty(availableNodes)) {\n            return [];\n        } else {\n            return availableNodes.map(({ name }) => ({\n                title: name,\n            }));\n        }\n    }\n\n    handleFileUpload = (e) => {\n        const { setAvailableNodes } = this.props;\n\n        const fileReader = new FileReader();\n        fileReader.readAsText(e.target.files[0], \"UTF-8\");\n        fileReader.onload = e => {\n            try {\n                const jsonData = jsonlint.parse(e.target.result);\n                if (has(jsonData, \"availableNodes\") && isArray(jsonData.availableNodes)) {\n                    setAvailableNodes(jsonData.availableNodes);\n                    toaster.success(\"File has been read successfully!\");\n                } else {\n                    throw new Error(`JSON format must be: { \"availableNodes\": [] }`);\n                }\n            } catch(err) {\n                toaster.danger(`Error - ${err.message}`);\n            }\n        }\n        fileReader.onerror = e => {\n            toaster.danger(\"Failed to read file!\");\n            fileReader.abort();\n        }\n    }\n\n    onExportBtnClick = () => {\n        const { availableNodes } = this.props;\n        const jsonData = {\n            availableNodes,\n        };\n\n        exportDataToJsonFile({ fileName: \"flow-tree-available-nodes\", jsonData });\n    }\n\n    render() {\n        const { availableNodes } = this.props;\n\n        return (\n            <Box width=\"100%\" height=\"100%\">\n                <Flex height=\"100%\" p={15} paddingTop={0} flexDirection=\"column\">\n                    <SubPanelHeaderCmp \n                        title=\"Nodes\"\n                        actionsCmp={\n                            <Flex\n                                flexDirection=\"row\"\n                            >\n                                <AddNodeCmp onAddNode={this.onAddNode} />\n                                <Popover\n                                    position={Position.BOTTOM_RIGHT}\n                                    content={\n                                        <Menu>\n                                            <Menu.Group>\n                                                <Menu.Item icon={ImportIcon} onSelect={ () => this.fileInputRef.current.click() }>\n                                                    <Flex>\n                                                        <input\n                                                            ref={this.fileInputRef}\n                                                            onChange={this.handleFileUpload}\n                                                            type=\"file\"\n                                                            style={{ display: \"none\" }}\n                                                            accept=\"application/JSON\"\n                                                        />\n                                                        Import JSON\n                                                    </Flex>\n                                                </Menu.Item>\n                                                <Menu.Divider />\n                                                <Menu.Item \n                                                    icon={DownloadIcon}\n                                                    disabled={isEmpty(availableNodes)} \n                                                    onSelect={ () => this.onExportBtnClick() }\n                                                >\n                                                    Export JSON\n                                                </Menu.Item>\n                                            </Menu.Group>\n                                        </Menu>\n                                    }\n                                >\n                                    <Button iconAfter={CaretDownIcon}>File</Button>\n                                </Popover>\n                            </Flex>\n                        }\n                    />\n                    {\n                        isEmpty(availableNodes) ? (\n                            <InstructionsCmp\n                                icon={AddIcon}\n                            >\n                                Add Nodes or Import JSON File\n                            </InstructionsCmp>\n                        )\n                        :\n                        (\n                            <SortableTree\n                                treeData={this.getAvailableNodes()}\n                                dndType=\"FLOW_TREE_DND_TYPE\"\n                                innerStyle={{ padding: \"10px\"}}\n                                onChange={this.onTreeChange}\n                                shouldCopyOnOutsideDrop={true}\n                                canNodeHaveChildren={node => false}\n                                canDrop={node => false}\n                                generateNodeProps={({ node, path }) => ({\n                                    buttons: [\n                                        <IconButton \n                                            icon={CrossIcon} \n                                            intent=\"danger\" \n                                            onClick={() => this.onDeleteClick(path)}\n                                        />\n                                    ],\n                                })}\n                            />\n                        )\n                    }\n                </Flex>\n            </Box>\n        );\n    }\n}\n\nexport default NodesPanelCmp;","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../actions/globalActions';\nimport NodesPanelCmp from \"../components/NodesPanelCmp\";\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n      availableNodes: state.global.flowTreeTool.availableNodes,\n      ...ownProps,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n        setAvailableNodes: (availableNodes) => dispatch(GlobalActions.setAvailableNodes(availableNodes)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(NodesPanelCmp);","import React, { Component } from 'react';\nimport { Flex, Heading, Link, Box } from 'rebass';\nimport BaseContentCmp from '../../components/BaseContentCmp';\nimport FlowTreeEditorContainer from '../../containers/FlowTreeEditorContainer';\nimport JsonEditorContainer from '../../containers/JsonEditorContainer';\nimport NodesPanelContainer from '../../containers/NodesPanelContainer';\n\nexport default class FlowTreeTool extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <BaseContentCmp \n                title=\"Flow Tree Generator\" \n                withLinkToHome\n            >\n                <Flex\n                    width=\"100%\"\n                    height=\"100%\"\n                    paddingTop={60}\n                    sx={{\n                        position: \"fixed\",\n                        top: 0,\n                        left: 0,\n                    }}\n                >\n                    <Box\n                        width={2/8}\n                        sx={{\n                            borderRight: \"1px solid #d8d8d8\"\n                        }}\n                    >\n                        <NodesPanelContainer />\n                    </Box>\n                    <Box\n                        width={4/8}\n                        sx={{\n                            borderRight: \"1px solid #d8d8d8\"\n                        }}\n                    >\n                        <FlowTreeEditorContainer />\n                    </Box>\n                    <Box\n                        width={2/8}\n                    >\n                        <JsonEditorContainer />\n                    </Box>\n                </Flex>\n            </BaseContentCmp>\n        )\n    }\n}","import { connect } from \"react-redux\";\nimport * as GlobalActions from '../../actions/globalActions';\nimport FlowTreeTool from './FlowTreeTool';\n\nconst mapStateToProps = (state , ownProps) => {\n    return {\n      isLoading: state.global.isLoading,\n      statusMessage: state.global.statusMessage,\n      flowTreeExportName: state.global.flowTreeTool.flowTreeExport.name,\n      jsonEditorContent: state.global.flowTreeTool.jsonEditorContent,\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {       \n        setIsLoading: (isLoading) => dispatch(GlobalActions.setIsLoading(isLoading)),\n        setStatusMessage: (statusMessage) => dispatch(GlobalActions.setStatusMessage(statusMessage)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(FlowTreeTool);","import { HomeIcon, IconButton, Button, CrossIcon, BanCircleIcon, DeleteIcon } from 'evergreen-ui';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Flex, Text } from 'rebass';\n\nconst PageNotFoundCmp = () => {\n    return (\n        <Flex \n            width=\"100%\"\n            height=\"100%\"\n            sx={{\n                position: \"fixed\",\n                top: 0,\n                left: 0\n            }}\n        >\n            <Flex\n                width=\"100%\"\n                height=\"100%\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Flex \n                    flexDirection=\"column\" \n                    justifyContent=\"center\" \n                    alignItems=\"center\"\n                >\n                    <Text fontSize=\"3em\">¯\\_(ツ)_/¯</Text>\n                    <Text fontSize=\"12em\">404</Text>\n                    <Text fontSize=\"1.5em\">The page does not exist.</Text>\n                    <Link to=\"/\" style={{ textDecoration: \"none\", color: \"black\", padding: \"15px\"}}>\n                        <Button iconBefore={HomeIcon} size=\"large\" marginRight={10}>\n                            Go Home\n                        </Button>\n                    </Link>\n                </Flex>\n            </Flex>\n        </Flex>\n    );\n}\n\nexport default PageNotFoundCmp;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Box } from 'rebass';\nimport './App.css';\nimport Home from './pages/Home';\nimport FlowTreeTool from './pages/FlowTreeTool';\nimport PageNotFoundCmp from './components/PageNotFoundCmp';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Box width=\"100%\" height=\"100%\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/flowtreetool\" component={FlowTreeTool} />\n          <Route component={PageNotFoundCmp} />\n        </Switch>\n      </Box>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as ACTIONS from '../constants/actions';\n\nconst initialState = {\n    isLoading: false,\n    statusMessage: \"\",\n    flowTreeTool: {\n        availableNodes: [],\n        jsonEditorContent: \"\",\n        flowTree: [],\n        flowTreeExport: {\n            name: \"\",\n            nodes: [],\n        },\n        parsingError: \"\",\n    }\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case ACTIONS.RESET_STATE: {\n            return {\n                ...initialState,\n            };\n        }\n        case ACTIONS.SET_STATUS_MESSAGE: {\n            const { statusMessage } = action.payload;\n    \n            return {\n                ...state,\n                statusMessage,\n            }\n        }\n        case ACTIONS.SET_IS_LOADING: {\n            const { isLoading } = action.payload;\n    \n            return {\n                ...state,\n                isLoading,\n            }\n        }\n        case ACTIONS.SET_FLOW_TREE: {\n            const { flowTree } = action.payload;\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    flowTree,\n                },\n            }\n        }\n        case ACTIONS.SET_FLOW_TREE_EXPORT_NAME: {\n            const { flowTreeExportName } = action.payload;\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    flowTreeExport: {\n                        ...state.flowTreeTool.flowTreeExport,\n                        name: flowTreeExportName,\n                    },\n                },\n            }\n        }\n        case ACTIONS.SET_FLOW_TREE_EXPORT_NODES: {\n            const { flowTreeExportNodes } = action.payload;\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    flowTreeExport: {\n                        ...state.flowTreeTool.flowTreeExport,\n                        nodes: flowTreeExportNodes,\n                    },\n                },\n            }\n        }\n        case ACTIONS.SET_AVAILABLE_NODES: {\n            const { availableNodes } = action.payload;\n\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    availableNodes,\n                },\n            }\n        }\n        case ACTIONS.SET_JSON_EDITOR_CONTENT: {\n            const { jsonEditorContent } = action.payload;\n\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    jsonEditorContent,\n                },\n            }\n        }\n        case ACTIONS.SET_FLOW_TREE_PARSING_ERROR: {\n            const { parsingError } = action.payload;\n\n            return {\n                ...state,\n                flowTreeTool: {\n                    ...state.flowTreeTool,\n                    parsingError,\n                },\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n\n","import { combineReducers } from \"redux\";\nimport globalReducer from './global'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst globalPersistConfig = {\n    key: 'global',\n    storage: storage,\n    whitelist: [], // specify which ones to persist offline\n  }\n\nexport default combineReducers({ \n    global: persistReducer(globalPersistConfig, globalReducer)\n});","import { createStore } from \"redux\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2'\nimport rootReducer from \"./reducers\";\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    blacklist: ['global'],\n    stateReconciler: autoMergeLevel2\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n/* eslint-disable no-underscore-dangle */\nexport const store = createStore(\n    persistedReducer, /* preloadedState, */\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport const persistor = persistStore(store);\n/* eslint-enable */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-sortable-tree/style.css'; \nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n        <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}